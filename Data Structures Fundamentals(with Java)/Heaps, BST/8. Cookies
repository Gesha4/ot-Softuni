/*We want the sweetness of all his cookies to be greater than value K. To do this, we need to repeatedly mix two
cookies with the least sweetness. We creates a special combined cookie with sweetness calculated by:
- (least sweet cookie) + (2 * 2nd least sweet cookie).
We repeats this procedure until all the cookies in the collection have a sweetness not less than K.
You are given the cookies. Return the number of operations required to give the cookies a sweetness not less than
K. Return -1 if this isn&#39;t possible.
Implement the Integer solve (int k, int[] cookies) method inside the provided CookiesProblem class.*/

package solutions;
import java.util.PriorityQueue;
import java.util.Queue;
public class CookiesProblem {
    public Integer solve(int requiredSweetness, int[] cookiesSweetness) {
        Queue<Integer> cookies = new PriorityQueue<>();
        for(int sweetness : cookiesSweetness) {
        	cookies.add(sweetness);
        }
        int currentMinSweetness = cookies.peek();
        int steps = 0;
        while(currentMinSweetness < requiredSweetness && cookies.size() > 1) {
        	int leastSweetCookie = cookies.poll();
        	int secondLeastSweetCookie = cookies.poll();
        	int combinedSweetness = leastSweetCookie + 2 * secondLeastSweetCookie;
        	cookies.add(combinedSweetness);
        	currentMinSweetness = cookies.peek();
        	steps++;
        }
        return currentMinSweetness > requiredSweetness ? steps : -1;
    }
}
