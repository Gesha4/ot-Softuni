import interfaces.AbstractBinarySearchTree;
import interfaces.AbstractBinarySearchTree.Node;

public class BinarySearchTree<E extends Comparable<E>> {
	private Node<E> root;
	private Node<E> leftChild;
	private Node<E> rightChild;
	
	public static class Node<E> {
        public E value;
        public Node<E> leftChild;
        public Node<E> rightChild;

        public Node(E value) {
            this.value = value;
        }

        public Node(E value, Node<E> leftChild, Node<E> rightChild) {
            this.value = value;
            this.leftChild = leftChild;
            this.rightChild = rightChild;
        }
    }
	
	public BinarySearchTree() {
	}
	
	public BinarySearchTree(Node<E> root) {
		this.copy(root);
		
	}
	
    private void copy(Node<E> node) {
    	if(node != null) {
    		this.insert(node.value);
    		this.copy(node.leftChild);
    		this.copy(node.rightChild);
    	}
	}

	@Override
    public void insert(E element) {
    	Node<E> newNode = new Node<>(element);
    	if(this.getRoot() == null) {
    		this.root = newNode;
    	} else {
    		Node<E> prev = this.root;
    		Node<E> current = this.root;
    		while(current != null){
    			prev = current;
    			if(isLess(element, current.value)) {
    				current = current.leftChild;
    			} else if(isGreater(element, current.value)) {
    				current = current.rightChild;
    			} else {
    				return;
    			}
    		}
    		if(isLess(element, prev.value)) {
				prev.leftChild = newNode;
			} else if(isGreater(element, prev.value)) {
				prev.rightChild = newNode;
			}
    	}
    }

    private boolean isLess(E first, E second) {
		return first.compareTo(second) < 0;
	}
    
    private boolean isGreater(E first, E second) {
		return first.compareTo(second) > 0;
	}
    
    private boolean areEqual(E first, E second) {
		return first.compareTo(second) == 0;
	}

	@Override
    public boolean contains(E element) {
        Node<E> current = this.root;
        while(current != null) {
        	if(isLess(element, current.value)) {
        		current = current.leftChild;
        	} else if(isGreater(element, current.value)) {
        		current = current.rightChild;
        	} else if(areEqual(element, current.value)){
        		return true;
        	}
        }
        return false;
    }

    @Override
    public AbstractBinarySearchTree<E> search(E element) {
    	AbstractBinarySearchTree<E> result = new BinarySearchTree<>();
    	Node<E> current = this.root;
        while(current != null) {
        	if(isLess(element, current.value)) {
        		current = current.leftChild;
        	} else if(isGreater(element, current.value)) {
        		current = current.rightChild;
        	} else if(areEqual(element, current.value)){
        		return new BinarySearchTree<>(current);
        	}
        }
        return result;
    }

    @Override
    public Node<E> getRoot() {
        return this.root;
    }

    @Override
    public Node<E> getLeft() {
        return this.leftChild;
    }

    @Override
    public Node<E> getRight() {
        return this.rightChild;
    }

    @Override
    public E getValue() {
        return this.root.value;
    }
}
