/*You are given a skeleton with a class Loader that implements the Buffer interface. The methods are not
implemented your task is to implement them:
- void add (Entity entity) – adds an entity inside the loader
- Entity extract (int id) – removes and returns the entity with the given id. If the entity is not present or the 
Loader is empty return null
- Entity find (Entity entity) – finds and returns the entity. If the entity is not present or the Loader is empty return null
- boolean contains(Entity entity) – returns true if the entity is stored and false otherwise
- int entitiesCount () – returns the number of entities stored
- void replace (Entity oldEntity, Entity newEntity) – finds and replaces the first parameter (oldEntity) with the
second one (newEntity) if present if not throw IllegalStateException("Entity not found")
- void swap (Entity first, Entity second) – finds and swaps the first parameter (first) with the second one
(second) if both are present if not throw IllegalStateException("Entities not found")
- void clear () – clears all the entities stored the Loader is left empty
- Entity[] toArray () – returns all the elements as an array, if the Loader is empty return an empty array
- List<Entity> retainAllFromTo (Status lowerBound, Status upperBound) – returns all the entities with given status within the 
range (both are inclusive) if none are found return an empty List
- List<Entity> getAll () – returns all the entities if none returns an empty List
- void updateAll (Status oldStatus, Status newStatus) – updates all the entities with the given status (oldStatus) and sets their
status to (newStatus)
- void removeSold () – removes all the entities with status "SOLD" from the Loader*/
package core;

import interfaces.Buffer;
import interfaces.Entity;
import model.BaseEntity;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

public class Loader implements Buffer {
	private List<Entity> data;
	public Loader() {
		this.data = new ArrayList<>();
	}
	
    @Override
    public void add(Entity entity) {
    	this.data.add(entity);
    }

    @Override
    public Entity extract(int id) {
    	Entity result = null;
        for(Entity current : this.data) {
        	if(current.getId() == id) {
        		result = current;
        		this.data.remove(current);
        		break;
        	}
        }
        return result;
    }

    @Override
    public Entity find(Entity entity) {
    	Entity result = null;
    	for(Entity current : this.data) {
    		if(current == entity) {
    			result = current;
    			break;
    		}
    	}
        return result;
    }

    @Override
    public boolean contains(Entity entity) {
        return this.data.contains(entity);
    }

    @Override
    public int entitiesCount() {
        return this.data.size();
    }

    @Override
    public void replace(Entity oldEntity, Entity newEntity) {
    	int index = this.data.indexOf(oldEntity);
    	if(index == -1) {
    		throw new IllegalStateException("Entity not found");
    	} else {
    		this.data.set(index, newEntity);
    	}
    }

    @Override
    public void swap(Entity first, Entity second) {
    	int firstIndex = -1;
    	int secondIndex = -1;
    	int size = this.data.size();
    	for(int i = 0; i < size; i++) {
    		if(this.data.get(i) == first) {
    			firstIndex = i;
    		}
    		if(this.data.get(i) == second) {
    			secondIndex = i;
    		}
    	}
    	if(firstIndex == -1 || secondIndex == -1) {
    		throw new IllegalStateException("Entity not found");
    	} else {
    		Entity temp = this.data.get(firstIndex);
    		this.data.set(firstIndex, this.data.get(secondIndex));
    		this.data.set(secondIndex, temp);
    	}
    }

    @Override
    public void clear() {
    	this.data.clear();
    }

    @Override
    public Entity[] toArray() {
    	Entity[] result = new Entity[this.data.size()];
    	this.data.toArray(result);
        return result;
    }

    @Override
    public List<Entity> retainAllFromTo(BaseEntity.Status lowerBound, BaseEntity.Status upperBound) {
        return this.data.stream()
        		.filter(a -> a.getStatus().ordinal() >= lowerBound.ordinal() 
        			&& a.getStatus().ordinal() <= upperBound.ordinal())
        		.collect(Collectors.toList());
    }

    @Override
    public List<Entity> getAll() {
        return new ArrayList<>(this.data);
    }

    @Override
    public void updateAll(BaseEntity.Status oldStatus, BaseEntity.Status newStatus) {
    	for(int i = 0; i < this.data.size(); i++) {
    		if(this.data.get(i).getStatus().equals(oldStatus)) {
    			this.data.get(i).setStatus(newStatus);
    		}
    	}
    }

    @Override
    public void removeSold() {
    	this.data = this.data.stream()
    			.filter(e -> !e.getStatus().equals(BaseEntity.Status.SOLD))
    			.collect(Collectors.toList());
    }

    @Override
    public Iterator<Entity> iterator() {
        return this.data.iterator();
    }
}
