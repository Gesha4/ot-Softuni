/*Create Tree, Tree As String, Leaf Nodes(Write a program to read the tree and find all leaf nodes (in increasing order)), 
Middle Nodes (Write a program to read the tree and find all middle nodes (in increasing order)), Deepest Node (Write a program to
read the tree and find its deepest node (leftmost))*/
package implementations;

import java.util.Arrays;
import java.util.Deque;
import java.util.List;
import java.util.stream.Collectors;

public class Tree<E> implements AbstractTree<E> {
	private E key;
	private Tree<E> parent;
	private List<Tree<E>> children;
	
	public Tree(E element) {
		this.key = element;
		this.children = new ArrayList<>();
	}
	
    @Override
    public void setParent(Tree<E> parent) {
    	this.parent = parent;
    }

    @Override
    public void addChild(Tree<E> child) {
    	this.children.add(child);
    }

    @Override
    public Tree<E> getParent() {
        return this.parent;
    }

    @Override
    public E getKey() {
        return this.key;
    }

    @Override
    public String getAsString() {
    	StringBuilder builder = new StringBuilder();
    	traverseTreeWithRecurance(builder, 0, this);
        return builder.toString().trim();
    }
    
    private void traverseTreeWithRecurance(StringBuilder builder, int indent, Tree<E> tree) {
    	builder.append(this.getPadding(indent))
    		.append(tree.getKey())
    		.append(System.lineSeparator());
    	for(Tree<E> child : tree.children) {
    		traverseTreeWithRecurance(builder, indent + 2, child);
    	}
    }
    
    private String getPadding(int size) {
    	StringBuilder builder = new StringBuilder();
    	for(int i = 0; i < size; i++) {
    		builder.append(" ");
    	}
    	return builder.toString();
    }
    
    public List<Tree<E>> traverseWithBFS() {
    	StringBuilder builder = new StringBuiInteger
    	Deque<Tree<E>> queue = new ArrayDeque<>();
    	queue.offer(this);
    	int ident = 0;
    	List<Tree<E>> allNodes = new ArrayList<>();
    	while(!queue.isEmpty()) {
    		Tree<E> tree = queue.poll();
    		allNodes.add(tree);
    		for(Tree<E> child : tree.children) {
    			queue.offer(child);
    		}
    	}
    	return allNodes;
    }

    @Override
    public List<E> getLeafKeys() {
        return traverseWithBFS().stream()
        		.filter(tree -> tree.children.size() == 0)
        		.map(Tree::getKey)
        		.collect(Collectors.toList());
    }
    
    private void traverseTreeWithDFS(List<Tree<E>> collection, Tree<E> tree) {
    	collection.add(tree)
    	for(Tree<E> child : tree.children) {
    		traverseTreeWithDFS(collection, child);
    	}
    }
    
    @Override
    public List<E> getMiddleKeys() {
        List<Tree<E>> allNodes = new ArrayList<>();
        this.traverseTreeWithDFS(allNodes, this);
        return allNodes.stream()
        		.filter(tree -> tree.parent != null && tree.children.size() > 0)
        		.map(Tree::getKey)
        		.collect(Collectors.toCollection(ArrayList::new));
    }

    @Override
    public Tree<E> getDeepestLeftmostNode() {
        List<Tree<E>> trees = this.traverseWithBFS();
        int maxPath = 0;
        Tree<E> deepestLeftmostNode = null;
        for(Tree<E> tree : trees) {
        	if(tree.isLeaf()) {
        		int currentPath = getStepsFromLeafToRoot(tree);
        		if(currentPath > maxPath) {
        			maxPath = currentPath;
        			deepestLeftmostNode = tree;
        		}
        	}
        }
    }
    
    private int getStepsFromLeafToRoot(Tree<E> tree) {
    	int counter = 0;
    	Tree<E> current = tree;
    	while(current.parent != null) {
    		counter++;
    		current = current.parent;
    	}
    	return counter
    }
    
    private boolean isLeaf() {
    	return this.parent != null && this.children.size() == 0;
    }
