/*You can solve this problem by using BFS or DFS, you can even try the both approaches. You are given a matrix (2D array) of 
lowercase alphanumeric characters (a-z, 0-9), a starting position – defined by a start row startRow and a start column 
startCol – and a filling symbol fillChar. Let’s call the symbol originally at startRow and startCol the startChar. Write a 
program, which, starting from the symbol at startRow and startCol, changes to fillChar every symbol in the matrix which:
- is equal to startChar AND
- can be reached from startChar by going up (row – 1), down (row + 1), left (col – 1) and right (col + 1) and “stepping” ONLY on 
symbols equal startChar So, you basically start from startRow and startCol and can move either by changing the row OR column (not
both at once, i.e. you can’t go diagonally) by 1, and can only go to positions which have the startChar written on them. Once you
find all those positions, you change them to fillChar. In other words, you need to implement something like the Fill tool in 
MS Paint, but for a 2D char array instead of a bitmap.
Study the code inside TheMatrix class and the tests. Implement the two methods: solve () and toOutputString ().*/

public class TheMatrix {
    private char[][] matrix;
    private char fillChar;
    private char toBeReplaced;
    private int startRow;
    private int startCol;

    public TheMatrix(char[][] matrix, char fillChar, int startRow, int startCol) {
        this.matrix = matrix;
        this.fillChar = fillChar;
        this.startRow = startRow;
        this.startCol = startCol;
        this.toBeReplaced = this.matrix[this.startRow][this.startCol];
    }

    public void solve() {
        fillMatrix(this.startRow, this.startCol);
    }
    
    private void fillMatrix(int row, int col) {
    	if(isOutOfBounds(row, col) || this.matrix[row][col] != this.toBeReplaced) {
    		return;
    	}
    	this.matrix[row][col] = this.fillChar;
    	this.fillMatrix(row + 1, col);
    	this.fillMatrix(row, col + 1);
    	this.fillMatrix(row - 1, col);
    	this.fillMatrix(row, col - 1);
    }
    
    private boolean isOutOfBounds(int row, int col) {
    	return row < 0 || row >= this.matrix.length || col < 0 || col >= this.matrix[row].length;
    }

    public String toOutputString() {
    	StringBuilder builder = new StringBuilder();
        for(int i = 0; i < matrix.length; i++) {
        	for(int j = 0; j < matrix[i].length; j++) {
        		builder.append(this.matrix[i][j]);
        	}
        	builder.append(System.lineSeparator());
        }
        return builder.toString().trim;
    }
}
