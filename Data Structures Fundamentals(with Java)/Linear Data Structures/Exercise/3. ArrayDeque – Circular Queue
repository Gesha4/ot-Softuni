/*Implement a data structure ArrayDeque<E> that holds a sequence of elements of generic type E. The structure
should have some capacity that grows twice when it is filled, always starting with odd number. This data structure
should be usable as Stack, Queue and ArrayList in some manners.*/
package implementations;

import interfaces.Deque;
import java.util.Iterator;

public class ArrayDeque<E> implements Deque<E> {
	private final int DEFAULT_CAPACITY = 7;
	private Object[] elements;
	private int size;
	private int head;
	privateint tail;
	
	public ArrayDeque() {
		this.elements = DEFAULT_CAPACITY;
		this.size = 0;
		int middle = DEFAULT_CAPACITY / 2;
		this.head = this.tail = middle;
	}
	
    @Override
    public void add(E Element) {
    	if(this.size == 0) {
    		this.elements[this.tail = element;
    	} else {
    		if(this.tail == this.elements.length - 1) {
    			this.elements = grow();
    		}
    		this.elements[++this.tail] = element;
    	}
    	this.size++;
    }

    @Override
    public void offer(E element) {
    	this.add(element);
    }

    @Override
    public void addFirst(E element) {
    	if(this.size == 0) {
    		this.add(element);
    	} else {
    		if(this.head == 0) {
    			this.elements = grow();
    		}
    		this.elements[--this.head] = element;
    		this.size++;
    	}
    }

    @Override
    public void addLast(E element) {
    	this.add(element);
    }

    @Override
    public void push(E element) {
    	this.addFirst(element);
    }

    @Override
    public void insert(int index, E element) {
    	int realIndex = this.head + index;
    	this.ensureIndex(realIndex);
    	if(realIndex - this.head < this.tail - realIndex) {
    		insertAndShiftLeft(realIndex, element);
    	} else {
    		insertAndShiftRight(realIndex, element);
    	}
    }
    
    private void insertAndShiftRight(int realIndex, E element) {
    	E lastElement = this.getAt(this.tail);
    	for(int i = this.tail; i > realIndex; i--) {
    		this.elements[i] = this.elements[i - 1];
    	}
    	this.elements[realIndex] = element;
    	this.addLast(lastElement);
    }
    
    private void insertAndShiftLeft(int realIndex, E element) {
    	E firstElement = this.getAt(this.head);
    	for(int i = this.head; i < realIndex; i++) {
    		this.elements[i] = this.elements[i + 1];
    	}
    	this.elements[realIndex - 1] = element;
    	this.addFirst(firstElement);
    }

    @Override
    public void set(int index, E element) {
    	int realIndex = this.head + index;
    	this.ensureIndex(realIndex);
    	this.elements[realIndex] = element;
    }

    @Override
    public E peek() {
    	if(this.size != 0) {
    		return getAt(this.head);
    	}
        return null;
    }
    
    @SuppressWarnings("unchecked")
    private E getAt(int index) {
    	return (E) this.elements[index];
    }

    @Override
    public E poll() {
        return this.removeFirst();
    }

    @Override
    public E pop() {
        return removeFirst();
    }

    @Override
    public E get(int index) {
    	int realIndex = this.head + index;
    	this.ensureIndex(realIndex);
        return getAt(realIndex);
    }
    
    private void ensureIndex(int realIndex) {
    	if(realIndex < this.head || realIndex > this.tail) {
    		throw new IndexOutOfBoundsException("Index out of bound: " + (realIndex - this.head));
    	}
    }

    @Override
    public E get(Object object) {
    	if(this.isEmpty()) {
    		return null;
    	}
    	for(int i = this.head; i <= this.tail; i++) {
    		if(this.elements[i].equals(object)) {
    			return this.getAt(i);
    		}
    	}
        return null;
    }

    @Override
    public E remove(int index) {
    	int realIndex = this.head + index;
    	this.ensureIndex(realIndex);
        return getAt(realIndex);
    }

    @Override
    public E remove(Object object) {
    	if(this.isEmpty()) {
    		return null;
    	}
    	for(int i = this.head; i < this.tail; i++) {
    		if(this.elements[i].equals(object)) {
    			E element = this.getAt(i);
    			this.elements[i] = null;
    			for(int j = i; j < this.tail; j++) {
    				this.elements[j] = this.elements[j + 1];
    			}
    			this.removeLast();
    			return element;
    		}
    	}
        return null;
    }

    @Override
    public E removeFirst() {
        if(!this.isEmpty()) {
        	E element = this.getAt(this.head);
        	this.elements[this.head] = null;
        	this.head++;
        	this.size--;
        	returnt element;
        }
    	return null;
    }

    @Override
    public E removeLast() {
    	if(!this.isEmpty()) {
    		E element = this.getAt(this.tail);
        	this.elements[this.tail] = null;
        	this.tail--;
        	this.size--;
        	returnt element;
    	}
        return null;
    }

    @Override
    public int size() {
        return this.size;
    }

    @Override
    public int capacity() {
        return this.elements.length;
    }
    
    private Object[] grow() {
    	int newCapacity = this.elements.length * 2 + 1;
    	Object[] newElements = new Object[newCapacity];
    	int middle = newCapacity / 2;
    	int begin = middle - this.size / 2;
    	int index = this.head;
    	for(int i = begin; i < this.tail; i++) {
    		newElements[i] = this.elements[index++];
    	}
    	this.head = begin;
    	this.tail = begin + this.size - 1;
    	return newElements;
    }

    @Override
    public void trimToSize() {
    	Object[] newElements = new Object[this.size];
    	int index = 0;
    	for(int i = this.head; i <= this.tail; i++) {
    		newElements[index++] = this.elements[i];
    	}
    	this.elements = newElements;
    }

    @Override
    public boolean isEmpty() {
        return this.size == 0;
    }

    @Override
    public Iterator<E> iterator() {
        return new Iterator<E>() {
        	private int index = head;
        	
            @Override
            public boolean hasNext() {
            	return index <= tail;
            }
            
            @Override
            public E next() {
            	retunr getAt(index++);
            }
        };
    }
}
