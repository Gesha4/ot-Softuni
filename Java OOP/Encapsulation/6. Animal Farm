/*You should be familiar with encapsulation already. For this problem, you’ll need to create class called Chicken. Chicken should
contain several fields, a constructor, and several methods. Your task is to encapsulate or hide anything that is not intended to 
be viewed or modified from outside the class.
Chicken
-	name: String
-	age: int
+	Chicken(String, int)
-	setName(String) : void
-	setAge (int): void
+	productPerDay (): double
+	toString(): Override
-	calculateProductPerDay() : double
Chicken lives for 15 years. Chicken have name for sure, at least 1 symbol long. Chicken producing eggs:
•	First 6 years it produces 2 eggs per day [0 - 5]
•	Next 6 years it produces 1 egg per day [6 - 11]
•	And after that it produces 0.75 eggs per day*/

package zadachi;
public class Chicken {
	private String name;
	private int age;
	private void setName(String name) {
		if(name == null || name.isEmpty() || name.equals("\\s+")) {
			throw new IllegalArgumentException("Name cannot be empty.");
		}
		this.name = name;
	}
	private void setAge(int age) {
		if(age < 0 || age > 15) {
			throw new IllegalArgumentException("Age should be between 0 and 15.");
		}
		this.age = age;
	}
	public Chicken(String name, int age) {
		this.setName(name);
		this.setAge(age);
	}
	public double productPerDay() {
		return this.calculateProductPerDay();
	}
	private double calculateProductPerDay() {
		double eggs;
		if(this.age >= 0 && this.age <= 5) {
			eggs = 2;
		} else if(this.age >= 6 && this.age <= 11) {
			eggs = 1;
		} else {
			eggs = 0.75;
		}
		return eggs;
	}
	@Override
	public String toString() {
		return String.format("Chicken %s (age %d) can produce %.2f eggs per day.", this.name, this.age, 
            this.calculateProductPerDay());
	}
}
