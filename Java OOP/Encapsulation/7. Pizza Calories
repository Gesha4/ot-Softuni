/*A Pizza is made of a dough and different toppings. You should model a class Pizza which should have a name, dough and 
toppings as fields. Every type of ingredient should have its own class.
Pizza
-	name: String
-	dought:  Dough
-	toppings: List<Topping> 
+ 	Piza (String, int numberOfToppings)
-	setToppings(int) : void
-	setName(String) : void
+	setDough(Dough) : void
+	getName(): String
+	addTopping (Topping) : void
+	getOverallCalories () : double

Every ingredient has different fields: the dough can be white or wholegrain and in addition it can be crispy, chewy or homemade.
The toppings can be of type meat, veggies, cheese or sauce. Every ingredient should have a weight in grams and a method for 
calculating its calories according its type. Calories per gram are calculated through modifiers. Every ingredient has 2 calories
per gram as a base and a modifier that gives the exact calories.
Dough
-	flourType: String
-	bakingTechnique: String
-	weight: double
+ 	Dought (String, String, double)
-	setWeight(double): void
-	setFlourType(String): void
-	setBakingTechnique(String): void
+	calculateCalories (): double 
Topping
-	toppingType: String
-	weight: double
+ 	Topping (String, double)
-	setToppingType (String): void
-	setWeight (double): void
+	calculateCalories (): double

Your job is to model the classes in such a way that they are properly encapsulated and to provide a public method for every
pizza that calculates its calories according to the ingredients it has.Dough Modifiers	Toppings Modifiers
•	White – 1.5;
•	Wholegrain – 1.0;
•	Crispy – 0.9;
•	Chewy – 1.1;
•	Homemade – 1.0;	•	Meat – 1.2;
•	Veggies – 0.8;
•	Cheese – 1.1;
•	Sauce – 0.9; 

For example, white dough has a modifier of 1.5, a chewy dough has a modifier of 1.1, which means that a white chewy dough 
weighting 100 grams will have (2 * 100) * 1.5 * 1.1 = 330.00 total calories.For example, meat has a modifier of 1.2, which 
means that a meat weighting 50 grams will have (2 * 50) * 1.2 = 120.00 total calories.
Data Validation must be in the order of the Input Data.
•	If invalid flour type or an invalid baking technique is given an exception is thrown with the message "Invalid type of dough.".
•	If dough weight is outside of range [1..200] throw an exception with the message "Dough weight should be in the range 
[1..200]."
•	If topping is not one of the provided types throw an exception with the message "Cannot place {name of invalid argument} on
top of your pizza."
•	If topping weight is outside of range [1..50] throw an exception with the message "{Topping type name} weight should be in 
the range [1..50].".
•	If name of the pizza is empty, only whitespace or longer than 15 symbols throw an exception with the message "Pizza name 
should be between 1 and 15 symbols.".
•	If number of topping is outside of range [0..10] throw an exception with the message "Number of toppings should be in range 
[0..10].".*/
//classes
package zadachi;
public class Dought {
	private String flourType;
	private String bakingTechnique;
	private double weight;
	private void setFlourType(String flourType) {
		if(flourType.equalsIgnoreCase("white") || flourType.equalsIgnoreCase("wholegrain")) {
			this.flourType = flourType;			
		} else {
			throw new IllegalArgumentException("Invalid type of dough.");
		}
	}
	private void setBakingTechnique(String bakingTechnique) {
		if(bakingTechnique.equalsIgnoreCase("crispy") || bakingTechnique.equalsIgnoreCase("chewy") 
				|| bakingTechnique.equalsIgnoreCase("homemade")) {
			this.bakingTechnique = bakingTechnique;			
		} else {
			throw new IllegalArgumentException("Invalid type of dough.");
		}
	}
	private void setWeight(double weight) {
		if(weight >= 1 && weight <= 200) {
			this.weight = weight;			
		} else {
			throw new IllegalArgumentException("Dough weight should be in the range [1..200].");
		}
	}
	public Dought(String flourType, String bakingTechnique, double weight) {
		this.setFlourType(flourType);;
		this.setBakingTechnique(bakingTechnique);;
		this.setWeight(weight);;
	}
	public double calculateCalories() {
		double calories = 2 * this.weight;
		if(this.flourType.equalsIgnoreCase("white")) {
			calories *= 1.5;
		}
		if(this.bakingTechnique.equalsIgnoreCase("crispy")) {
			calories *= 0.9;
		} else if(this.bakingTechnique.equalsIgnoreCase("chewy")) {
			calories *= 1.1;
		}
		return calories;
	}
}

package zadachi;

public class Topping {
	private String toppingType;
	private double weight;
	private void setToppingType(String toppingType) {
		if(toppingType.equalsIgnoreCase("meat") || toppingType.equalsIgnoreCase("veggies") 
				|| toppingType.equalsIgnoreCase("cheese") || toppingType.equalsIgnoreCase("sause")) {
			this.toppingType = toppingType;			
		} else {
			throw new IllegalArgumentException(String.format("Cannot place %s on top of your pizza", toppingType));
		}
	}
	private void setWeight(double weight) {
		if(weight >= 1 && weight <= 50) {
			this.weight = weight;			
		} else {
			throw new IllegalArgumentException(String.format("%s weight should be in the range [1..50].", toppingType));
		}
	}
	public Topping(String toppingType, double weight) {
		this.setToppingType(toppingType);;
		this.setWeight(weight);;
	}
	public double calculateCalories() {
		double calories = 2 * this.weight;
		if(this.toppingType.equalsIgnoreCase("meat")) {
			calories *= 1.2;
		} else if(this.toppingType.equalsIgnoreCase("veggies")) {
			calories *= 0.8;
		} else if(this.toppingType.equalsIgnoreCase("cheese")) {
			calories *= 1.1;
		} else if(this.toppingType.equalsIgnoreCase("sause")) {
			calories *= 0.9;
		}
		return calories;
	}
}

package zadachi;
import java.util.ArrayList;
import java.util.List;
public class Pizza {
	private String name;
	private Dought dought;
	private List<Topping> toppings;
	private void setToppings(int numberOfToppings) {
		if(numberOfToppings >= 0 && numberOfToppings <= 10) {
			this.toppings = new ArrayList<>(numberOfToppings);
		} else {
			throw new IllegalArgumentException("Number of toppings should be in range [0..10].");
		}
	}
	private void setName(String name) {
		if(name.trim().isEmpty() || name.length() > 15) {
			throw new IllegalArgumentException("Pizza name should be between 1 and 15 symbols.");
		} else {
			this.name = name;
		}
	}
	public Pizza(String name, int numberOfToppings) {
		this.setName(name);
		this.setToppings(numberOfToppings);
	}
	public void setDought(Dought dought) {
		this.dought = dought;
	}
	public String getName() {
		return this.name;
	}
	public void addTopping(Topping topping) {
		this.toppings.add(topping);
	}
	public double getOverallCalories() {
		double calories = this.dought.calculateCalories();
		for(Topping topping : toppings) {
			calories += topping.calculateCalories();
		}
		return calories;
	}
}
