/*You are given a data structure that needs to be tested. Use the Java file CustomLinkedList.java and:
- Create Test Class and Test Methods for all public members that need testing.
- Create tests that ensure all methods, getters and setters work correctly.
- Use the @Test(expected = ExpectedException.class) annotation for methods that are expected to throw exception in case wrong
input is entered (those tests donâ€™t need assert messages).
- Give meaningful assert messages for failed tests.*/

package p05_CustomLinkedList;
public class CustomLinkedList<T> {
    private class ListNode {
        private T element;
        private ListNode nextNode;
        public ListNode(T element) {
            this.setElement(element);
            this.setNextNode(null);
        }
        public ListNode(T element, ListNode prevNode) {
            this.setElement(element);
            prevNode.setNextNode(this);
        }
        public T getElement() {
            return element;
        }
        public void setElement(T element) {
            this.element = element;
        }
        public ListNode getNextNode() {
            return nextNode;
        }
        public void setNextNode(ListNode nextNode) {
            this.nextNode = nextNode;
        }
    }
    private ListNode head;
    private ListNode tail;
    private int count;
    public CustomLinkedList() {
        this.head = null;
        this.tail = null;
        this.count = 0;
    }
    private int getCount() {
        return count;
    }
    public T get(int index) {
        if (index >= this.count || index < 0) {
            throw new IllegalArgumentException("Invalid index: " + index);
        }
        ListNode currentNode = this.head;
        for (int i = 0; i < index; i++) {
            currentNode = currentNode.getNextNode();
        }
        return currentNode.getElement();
    }
    public void set(int index, T element) {
        if (index >= this.count || index < 0) {
            throw new IllegalArgumentException("Invalid index: " + index);
        }
        ListNode currentNode = this.head;
        for (int i = 0; i < index; i++) {
            currentNode = currentNode.getNextNode();
        }

        currentNode.setElement(element);
    }
    public void add(T item) {
        if (this.head == null) {
            // We have an empty list -> create a new head and tail
            this.head = new ListNode(item);
            this.tail = this.head;
        }
        else {
            // We have a non-empty list -> append the item after tail
            ListNode newNode = new ListNode(item, this.tail);
            this.tail = newNode;
        }
        this.count++;
    }
    public T removeAt(int index) {
        if (index >= this.count || index < 0) {
            throw new IllegalArgumentException("Invalid index: " + index);
        }
        // Find the element at the specified index
        int currentIndex = 0;
        ListNode currentNode = this.head;
        ListNode prevNode = null;
        while (currentIndex < index) {
            prevNode = currentNode;
            currentNode = currentNode.getNextNode();
            currentIndex++;
        }
        // Remove the found element from the list of nodes
        this.removeListNode(currentNode, prevNode);

        // Return the removed element
        return currentNode.getElement();
    }
    public int remove(T item) {
        // Find the element containing the searched item
        int currentIndex = 0;
        ListNode currentNode = this.head;
        ListNode prevNode = null;
        while (currentNode != null) {
            if (currentNode.getElement().equals(item)) {
                break;
            }
            prevNode = currentNode;
            currentNode = currentNode.getNextNode();
            currentIndex++;
        }
        if (currentNode != null) {
            // The element is found in the list -> remove it
            removeListNode(currentNode, prevNode);
            return currentIndex;
        }
        // The element is not found in the list -> return -1
        return -1;
    }
    public int indexOf(T item) {
        int index = 0;
        ListNode currentNode = this.head;
        while (currentNode != null) {
            if (currentNode.getElement().equals(item)) {
                return index;
            }
            currentNode = currentNode.getNextNode();
            index++;
        }
        return -1;
    }
    public boolean contains(T item) {
        int index = this.indexOf(item);
        boolean found = index != -1;
        return found;
    }
    private void removeListNode(ListNode node, ListNode prevNode) {
        this.count--;
        if (count == 0) {
            // The list becomes empty -> remove head and tail
            this.head = null;
            this.tail = null;
        }
        else if (prevNode == null) {
            // The head node was removed --> update the head
            this.head = node.getNextNode();
        }
        else {
            // Redirect the pointers to skip the removed node
            prevNode.setNextNode(node.getNextNode());
        }
        // Fix the tail in case it was removed
        if (this.tail == node) {
            this.tail = prevNode;
        }
    }
}

package p05_CustomLinkedList;
import org.junit.Assert;
import org.junit.Test;
public class CustomLinkedListTest {
	@Test (expected = IllegalArgumentException.class)
	public void testGetThrowsWhenIndexIsBigger() {
		CustomLinkedList list = new CustomLinkedList();
		list.get(5);
	}
	@Test (expected = IllegalArgumentException.class)
	public void testGetThrowsWhenIndexIsSmaller() {
		CustomLinkedList list = new CustomLinkedList();
		list.get(-5);
	}
	@Test
	public void testGetThrowsWhenIndexIsInRange() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		Assert.assertEquals("Goshu", list.get(0));
	}
	@Test (expected = IllegalArgumentException.class)
	public void testSetThrowsWhenIndexIsBigger() {
		CustomLinkedList list = new CustomLinkedList();
		list.set(5, "Goshu");
	}
	@Test (expected = IllegalArgumentException.class)
	public void testSetThrowsWhenIndexIsSmaller() {
		CustomLinkedList list = new CustomLinkedList();
		list.set(-5, "Goshu");
	}
	@Test
	public void testSetThrowsWhenIndexIsInRange() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		list.set(0, "Mishu");
		Assert.assertEquals("Mishu", list.get(0));
	}
	@Test (expected = IllegalArgumentException.class)
	public void testRemoveAtThrowsWhenIndexIsBigger() {
		CustomLinkedList list = new CustomLinkedList();
		list.removeAt(5);
	}
	@Test (expected = IllegalArgumentException.class)
	public void testRemoveAtThrowsWhenIndexIsSmaller() {
		CustomLinkedList list = new CustomLinkedList();
		list.removeAt(-5);
	}
	@Test 
	public void testRemoveAtThrowsWhenIndexIsInRange() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		list.add("Pesho");
		list.add("Misho");
		Assert.assertEquals("Misho", list.removeAt(2));
	}
	@Test
	public void testRemoveWhenThereIsNoSuchItem() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		list.add("Pesho");
		list.add("Misho");
		Assert.assertEquals(-1, list.remove("Mimi"));
	}
	@Test
	public void testRemoveWhenThereIsSuchItem() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		list.add("Pesho");
		list.add("Misho");
		Assert.assertEquals(2, list.remove("Misho"));
	}
	@Test
	public void testIndexOfWhenNoSuchItem() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		list.add("Pesho");
		list.add("Misho");
		Assert.assertEquals(-1, list.indexOf("Mimi"));
	}
	@Test
	public void testIndexOfWhenThereIsSuchItem() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		list.add("Pesho");
		list.add("Misho");
		Assert.assertEquals(2, list.indexOf("Misho"));
	}
	@Test
	public void testContainsNotFound() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		list.add("Pesho");
		list.add("Misho");
		Assert.assertEquals(false, list.contains("Mimi"));
	}
	@Test
	public void testContainsFound() {
		CustomLinkedList list = new CustomLinkedList();
		list.add("Goshu");
		list.add("Pesho");
		list.add("Misho");
		Assert.assertEquals(true, list.contains("Misho"));
	}
}
