/*In test/java folder, create a package called rpg_tests
Create a class AxeTests
Create the following tests:
•	Test if weapon loses durability after each attack
•	Test attacking with a broken weapon
Create a class DummyTests
Create the following tests:
•	Dummy loses health if attacked
•	Dead Dummy throws exception if attacked
•	Dead Dummy can give XP
•	Alive Dummy can't give XP
Test if hero gains XP when target dies
To do this, you need to: 
•	Make Hero class testable (use Dependency Injection)
•	Introduce Interfaces for Axe and Dummy
o	Interface Weapon 
o	Interface Target 
Create fake Weapon and fake Dummy for the test
Create HeroTests class and test gaining XP functionality by faking Weapon and Target classes*/

package com.sofuni.rpg_lab;
public class Axe implements Weapon{
    private int attackPoints;
    private int durabilityPoints;
    public Axe(int attack, int durability) {
        this.attackPoints = attack;
        this.durabilityPoints = durability;
    }
    public int getAttackPoints() {
        return this.attackPoints;
    }
    public int getDurabilityPoints() {
        return this.durabilityPoints;
    }
    public void attack(Dummy target) {
        if (this.durabilityPoints <= 0) {
            throw new IllegalStateException("Axe is broken.");
        }
        target.takeAttack(this.attackPoints);
        this.durabilityPoints -= 1;
    }
	@Override
	public void attack(com.sofuni.rpg_lab.Target target) {
		if(this.durabilityPoints <= 0) {
			throw new IllegalStateException("Axe is broken.");
		} else {
			target.takeAttack(this.attackPoints);
			this.durabilityPoints -= 1;			
		}
	}	
}

package com.sofuni.rpg_lab;
public class Dummy implements Target{
    private int health;
    private int experience;
    public Dummy(int health, int experience) {
        this.health = health;
        this.experience = experience;
    }
    public int getHealth() {
        return this.health;
    }
    public void takeAttack(int attackPoints) {
        if (this.isDead()) {
            throw new IllegalStateException("Dummy is dead.");
        }
        this.health -= attackPoints;
    }
    public int giveExperience() {
        if (!this.isDead()) {
            throw new IllegalStateException("Target is not dead.");
        }
        return this.experience;
    }
    public boolean isDead() {
        return this.health <= 0;
    }
}

package com.sofuni.rpg_lab;
public class Hero {
    private String name;
    private int experience;
    private Weapon weapon;
    public Hero(String name, Weapon weapon) {
        this.name = name;
        this.experience = 0;
        this.weapon = weapon;
    }
    public String getName() {
        return this.name;
    }
    public int getExperience() {
        return this.experience;
    }
    public Weapon getWeapon() {
        return this.weapon;
    }
    public void attack(Target target) {
        this.weapon.attack(target);

        if (target.isDead()) {
            this.experience += target.giveExperience();
        }
    }
}

package com.sofuni.rpg_lab;
public interface Weapon {
	void attack(Target target);
}

package com.sofuni.rpg_lab;
public interface Target {
	void takeAttack(int attackPoints);
	int getHealth();
	int giveExperience();
	boolean isDead();
}

package rpg_tests;
import org.junit.Assert;
import org.junit.Test;
import com.sofuni.rpg_lab.Axe;
import com.sofuni.rpg_lab.Dummy;
public class AxeTests {
	@Test
	public void weaponAttacksLoseDurability() {
		Axe axe = new Axe(10, 10);
		Dummy dummy = new Dummy(10, 10);
		axe.attack(dummy);
		Assert.assertEquals(9, axe.getDurabilityPoints());
	}
	@Test(expected = IllegalStateException.class)
	public void brokenWeaponCanAttack() {
		Axe axe = new Axe(10, 1);
		Dummy dummy = new Dummy(20, 10);
		axe.attack(dummy);
		axe.attack(dummy);
	}
}

package rpg_tests;
import org.junit.Assert;
import org.junit.Test;
import com.sofuni.rpg_lab.Axe;
import com.sofuni.rpg_lab.Dummy;
public class DummyTests {
	@Test
	public void loseHealth() {
		Axe axe = new Axe(5, 2);
		Dummy dummy = new Dummy(10, 10);
		axe.attack(dummy);
		Assert.assertEquals(5, dummy.getHealth());
	}
	@Test(expected = IllegalStateException.class)
	public void deadAttacked() {
		Axe axe = new Axe(5, 2);
		Dummy dummy = new Dummy(5, 10);
		axe.attack(dummy);
		axe.attack(dummy);
	}
	@Test
	public void deadGiveExp() {
		Axe axe = new Axe(5, 2);
		Dummy dummy = new Dummy(5, 10);
		axe.attack(dummy);
		Assert.assertEquals(10, dummy.giveExperience());
	}
	@Test(expected = IllegalStateException.class)
	public void aliveCantGiveExp() {
		Axe axe = new Axe(5, 2);
		Dummy dummy = new Dummy(10, 10);
		dummy.giveExperience();
	}
}

package rpg_tests;
import org.junit.Assert;
import org.junit.Test;
import com.sofuni.rpg_lab.Hero;
import com.sofuni.rpg_lab.Target;
import com.sofuni.rpg_lab.Weapon;
public class HeroTests {
	@Test
	public void killGainsExp() {
		Target fakeTarget = new Target() {
			public void takeAttack(int attackPoints) {}
			public int getHealth() {return 0;}
			public int giveExperience() {return 0;}
			public boolean isDead() {return false;}
		};
		Weapon fakeWeapon = new Weapon() {
			public void attack(Target target) {}
			public int getAttackPoints() {return 10;}
			public int getDurabilityPoints() {return 0;}
		};
		Hero hero = new Hero("Goshu", fakeWeapon);
		hero.attack(fakeTarget);
		Assert.assertEquals("Wrong experience", 10, hero.getExperience());
	}
}
