/*Finally, you have unlocked the safe and reached the treasure! Inside there are all kinds of gems, cash in different
currencies and gold bullions. Next to you there is a bag which unfortunately has a limited space. You don’t have much 
time so you need to take as much wealth as possible! But in order to get a bigger amount of the most valuable items, you
need to keep the following rules:
- The gold amount in your bag should always be more than or equal to the gem amount at any time
- The gem amount should always be more than or equal to the cash amount at any time
If you read an item which breaks one of these rules you should not put it in the bag. You should always be careful not to
exceed the overall bag’s capacity, because it will tear down and you will lose everything! You will receive the content of
the safe on a single line in the format "item quantity" pairs, separated by whitespace. You need to gather only three 
types of items:
- Cash - All three letter items
- Gem - All items which end on “Gem” (at least 4 symbols)
- Gold - this type has only one item with the name - “Gold”
Each item which does not fall in one of the above categories is useless and you should skip it. Reading item’s names 
should be CASE-INSENSITIVE. You should aggregate item’s quantities which have the same name. If you’ve kept the rules you
should escape successfully with a bag full of wealth. Now it’s time to review what you have managed to get out of the safe.
Print all the types ordered by total amount in descending order. Inside a type, order the items first alphabetically in 
descending order and then by their amount in ascending order. Use the format described below for each type.
Input
- On the first line, you will receive a number which represents the capacity of the bag
- On the second line, you will receive a sequence of item and quantity pairs
Output
Print only the types from which you have items in the bag ordered by Total Amount descending. Inside a type order the 
items first alphabetically in descending order and then by amount in ascending order. Use the following format for each 
type:
"<{type}> ${total amount}"
"##{item} - {amount}" - each item on new line

//classes

public class Bag {
	private CashContainer cashContainer;
	private Gold gold;
	private GemContainer gemContainer;
	private long capacity;
	
	public Bag(long capacity) {
		this.cashContainer = new CashContainer();
		this.gold = new Gold();
		this.gemContainer = new GemContainer();
		this.capacity = capacity;
	}

	public boolean hasRoomFod(Long value) {
		return value + this.getCurrentSize() <= capacity;
	}

	private Long getCurrentSize() {
		long size = this.gold.getValue();
		size += this.cashContainer.getSize();
		size += this.gemContainer.getSize();
		return size;
	}
	
	public void addGold(long value) {
		this.gold.addGold(value);
	}
	
	public void addGems(String name, long value) {
		if(this.gold.getValue() >= this.gemContainer.getSize() + value) {
			this.gemContainer.addGems(name, value);
		}
	}
	
	public void addCash(String name, long value) {
		if(this.gemContainer.getSize() >= this.cashContainer.getSize() + value) {
			this.cashContainer.addCash(name, value);
		}
	}
	
	public boolean isEmpty() {
		return this.getCurrentSize() == 0;
	}

	public CashContainer getCashContainer() {
		return cashContainer;
	}

	public Gold getGold() {
		return gold;
	}

	public GemContainer getGemContainer() {
		return gemContainer;
	}
}

import java.util.Map;
import java.util.TreeMap;

public class CashContainer {
	private Map<String, Long> cash;
	public CashContainer() {
		this.cash = new TreeMap<>();
	}
	
	public Long getSize() {
		return this.cash.values().stream().mapToLong(e -> e).sum();
	}
	
	public void addCash(String name, long value) {
		if(!this.cash.containsKey(name)) {
			this.cash.put(name, value);
		} else {
			this.cash.put(name, this.cash.get(name) + value);
		}
	}
	public void print() {
		 System.out.println("<Cash> $" + this.getSize());
		 cash.entrySet().stream()
		 	.sorted((f,s) -> f.getValue().compareTo(s.getValue()))
		 	.forEach(entry -> {
		 		System.out.printf("##%s - %d%n", entry.getKey(), entry.getValue());
		 	});
	 }
	
	public boolean isEmpty() {
		return cash.isEmpty();
	}
}


public class Gold {
	private long value;

	public void addGold(long value) {
		this.value += value;
	}

	public long getValue() {
		return value;
	}
	
	public void print() {
		System.out.println("<Gold> $" + this.value);
		System.out.println("##Gold - " + this.value);
	}
}

import java.util.Map;
import java.util.TreeMap;

public class GemContainer {
	private Map<String, Long> gems;
	public GemContainer() {
		this.gems = new TreeMap<>();
	}
	 public Long getSize() {
		 return this.gems.values().stream().mapToLong(e -> e).sum();
	 }
	 
	 public void addGems(String name, long value) {
		 if(!this.gems.containsKey(name)) {
			 this.gems.put(name, value);
		 } else {
			 this.gems.put(name, this.gems.get(name) + value);
		 }
	 }
	 
	 public void print() {
		 System.out.println("<Gems> $" + this.getSize());
		 gems.entrySet().stream()
		 	.sorted((f,s) -> f.getValue().compareTo(s.getValue()))
		 	.forEach(entry -> {
		 		System.out.printf("##%s - %d%n", entry.getKey(), entry.getValue());
		 	});
	 }
	 public boolean isEmpty() {
		 return gems.isEmpty();
	 }
}


import java.util.Iterator;

public class Tresure implements Iterable<Tresure.Pair<String, Long>>{
	
	public static class Pair<K, V>{
		private K first;
		private V second;
		public Pair(K first, V second) {
			this.first = first;
			this.second = second;
		}
		public K getFirst() {
			return first;
		}
		public V getSecond() {
			return second;
		}
	}
	
	private String[] goods;

	public Tresure(String[] goods) {
		this.goods = goods;
	}

	@Override
	public Iterator<Tresure.Pair<String, Long>> iterator() {
		return new Iterator<>() {
			private int index = 0;
			
			@Override
			public boolean hasNext() {
				return index < goods.length;
			}

			@Override
			public Tresure.Pair<String, Long> next() {
				String item = goods[index++];
				long value = Long.parseLong(goods[index++]);
				return new Tresure.Pair<>(item, value);
			}
		};
	}
}

//main
import java.util.Scanner;

public class zadachi {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		long capacity = Long.parseLong(scanner.nextLine());
		Tresure tresure = new Tresure(scanner.nextLine().split("\\s+"));
		Bag bag = new Bag(capacity);
		for(var pair : tresure) {
			String first = pair.getFirst();
			Long value = pair.getSecond();
			String type = null;
			if (first.length() == 3) {
				type = "Cash";
			} else if (first.toLowerCase().endsWith("gem")) {
				type = "Gem";
			} else if (first.toLowerCase().equals("gold")) {
				type = "Gold";
			}
			if (bag.hasRoomFod(value) && type != null) {
				switch(type) {
				case "Cash" : bag.addCash(first, value);break;
				case "Gem" : bag.addGems(first, value);break;
				case "Gold" : bag.addGold(value);break;
				}
			}
		}
		if(!bag.isEmpty()) {
			bag.getGold().print();
			if(!bag.getGemContainer().isEmpty()) {
				bag.getGemContainer().print();
				if(!bag.getCashContainer().isEmpty()) {
					bag.getCashContainer().print();
				}
			}
		}
	}
}
