/*You are given the skeleton of a word-processing program (like MS Word, OpenOffice Writer, etc.). The program reads a line of
text from the console, then starts reading commands for editing (text-transform) and executing them on the text. Each command
changes the text, the following command works on the changed text. When the command exit is entered, the program prints out the
modified text and exits. All commands are of the form:
{commandName} {startIndex} {endIndex}
Where commandName is a string describing which command should be used, startIndex is an integer which describes from which
index in the text the command should be applied, endIndex is an integer which describes to which index (exclusive) the command 
should be applied (i.e.  the command is applied on indices starting from startIndex and ending in endIndex - 1 inclusively)
The skeleton you are provided with contains the following files:
•	Main.java – contains the main(String[] args) method, reads input and prints output on the console
•	TextTransform.java – contains a base class for any text-transform added to the program
•	Command.java – contains class which represents commands
•	CommandInterface.java – defines an interface class which handles commands represented as strings (coming from the console,
read from main(String[] args)) 
•	CommandImpl.java – class which holds the implementation of the CommandInterface
The code uses an Initialization.java file, which is missing, but should define a way to generate a CommandInterface.
The files you are given support all logic necessary to implement the following command:
uppercase – transforms any alphabetical character in the text in the range [startIndex, endIndex) to its uppercase variant.
E.g. if the current text is som3. text and we are given the command uppercase 1 7 the current text will change to sOM3. Text
Note: if startIndex == endIndex, the command has no effect
Your task is to add the following commands:
•	cut – cuts (removes) characters in the text in the range [startIndex, endIndex), and remembers the last thing that was removed
E.g. if the current text is som3. text and we execute the command cut 1 7 the current text will change to sext (… I honestly 
didn’t plan in advance for this to be the result)
Note: if startIndex == endIndex, the command has no effect on the text, but “clears” the last remembered cut
•	paste – replaces the characters in the text in the range [startIndex, endIndex) with the characters which were removed by the
last cut E.g. if we have the text som3. Text and the commands cut 1 7 (text changed to sext) paste 3 4 the current text will 
change to sexom3. t (we paste the last cut – "om3. t" – over the 't' at the end of the text)
Note: if startIndex == endIndex, paste will insert the text at position startIndex, meaning that any text at startIndex will be
pushed to the right by the inserted text. E.g. if the last command was paste 0 0 (not paste 3 4), the text would be om3. Tsext
Input
The program defined in Main.java reads the following input:
A line of text, followed by a sequence of lines containing commands of the format 
{commandName} {startIndex} {endIndex}
ending with the command exit.
Output
The program defined in Main.java writes the following output:
The modified line of text.*/

package word;
public class Initialization {
	public static CommandInterface buildCommandInterface(StringBuilder text) {
		return new CommandImpl(text);
	}
}

package word;
public interface CommandInterface {
    void init();
    void handleInput(String input);
}

package word;
public interface TextTransform {
    void invokeOn(StringBuilder text, int startIndex, int endIndex);
}

package word;
public class Command {
    private String text;
    private TextTransform textTransform;
    public Command(String text, TextTransform textTransform){
        this.text = text;
        this.textTransform = textTransform;
    }
    public String getText() {
        return this.text;
    }
    public TextTransform getTextTransform() {
        return this.textTransform;
    }
}

package word;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
public class CommandImpl implements CommandInterface {
	private Map<String, TextTransform> commandTransforms;
	private StringBuilder text;
	private Deque<String> memory;
	protected List<Command> initCommands() {
		List<Command> commands = new ArrayList<>();
		commands.add(new Command("uppercase", new ToUpperTransform()));
		commands.add(new Command("cut" , new CutTransform()));
		commands.add(new Command("paste", new PasteTransform()));
		return commands;
	}
	public CommandImpl(StringBuilder text) {
		this.commandTransforms = new HashMap<>();
		for(Command command : this.initCommands()) {
			this.commandTransforms.put(command.getText(), command.getTextTransform());
		}
		this.text = text;
		this.memory = new ArrayDeque<>();
	}
    @Override
    public void init() {
        this.commandTransforms.clear();
        for (Command p : this.initCommands()) {
            this.commandTransforms.putIfAbsent(p.getText(), p.getTextTransform());
        }
    }
    @Override
    public void handleInput(String input) {
        String[] tokens = input.split("\\s+");
        String commandName = tokens[0];
        int startInd = Integer.parseInt(tokens[1]);
        int endInd = Integer.parseInt(tokens[2]);
        this.commandTransforms.get(commandName).invokeOn(this.text, startInd, endInd);
    }
    class ToUpperTransform implements TextTransform {
    	@Override
    	public void invokeOn(StringBuilder text, int startIndex, int endIndex){
    		for (int i = startIndex; i < endIndex; i++) {
    			text.setCharAt(i, Character.toUpperCase(text.charAt(i)));
    		}
    	}
    }
    class CutTransform implements TextTransform {
		@Override
		public void invokeOn(StringBuilder text, int startIndex, int endIndex) {
			if(startIndex == endIndex) {
				if(!memory.isEmpty()) {
					memory.pop();
				}
			} else {
				memory.push(text.substring(startIndex, endIndex));
				text.replace(startIndex, endIndex, "");
			}
		}
    }
    class PasteTransform implements TextTransform {
		@Override
		public void invokeOn(StringBuilder text, int startIndex, int endIndex) {
			if(startIndex >= 0 && endIndex >= 0) {
				if(!memory.isEmpty()) {
					if(startIndex == endIndex) {
						text.insert(startIndex, memory.peek());
					} else {
						text.replace(startIndex, endIndex, memory.peek());
					}
				}
			}
		}
    }
}

package word;
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        StringBuilder text = new StringBuilder(scanner.nextLine());
        CommandInterface commandInterface = Initialization.buildCommandInterface(text);
        String inputLine = scanner.nextLine();
        while(!inputLine.equals("exit")) {
            commandInterface.handleInput(inputLine);
            inputLine = scanner.nextLine();
        }
        System.out.println(text);
    }
}
