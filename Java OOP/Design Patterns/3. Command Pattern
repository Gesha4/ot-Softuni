public class Product {
	private String name;
	private int price;
	public String getName() {
		return this.name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getPrice() {
		return this.price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public Product(String name, int price) {
		this.name = name;
		this.price = price;
	}
	public void increasePrice(int amount) {
		this.price += amount;
	}
	public void decreasePrice(int amount) {
		this.price -= amount;
	}
	@Override
	public String toString() {
		return String.format("Current price for the %s product is %d$.%n", this.name, this.price);
	}
}

public interface Command {
	void executeAction();
}

public class DecreaseProductPriceCommand implements Command{
	private final Product product;
	private final int amount;
	public DecreaseProductPriceCommand(Product product, int amount) {
		this.product = product;
		this.amount = amount;
	}
	@Override
	public void executeAction() {
		this.product.decreasePrice(this.amount);
		System.out.printf("The price for the %s has been decreased by %d$.%n", this.product.getName(), this.amount);
	}
}

public class IncreaseProductPriceCommand implements Command{
	private final Product product;
	private final int amount;
	public IncreaseProductPriceCommand(Product product, int amount) {
		this.product = product;
		this.amount = amount;
	}
	@Override
	public void executeAction() {
		this.product.increasePrice(this.amount);
		System.out.printf("The price for the %s has been increased by %d$.%n", this.product.getName(), this.amount);
	}
}

import java.util.ArrayList;
import java.util.List;
public class ModifyPrice {
	private final List<Command> commands;
	private Command command;
	public ModifyPrice() {
		this.commands = new ArrayList<>();
	}
	public void setCommand(Command command) {
		this.command = command;
	}
	public void invoke() {
		this.commands.add(this.command);
		this.command.executeAction();
	}
}

public class zadachi {
	public static void main(String[] args) {
		ModifyPrice modifyPrice = new ModifyPrice();
		Product product = new Product("Phone", 500);
		execute(modifyPrice, new IncreaseProductPriceCommand(product, 100));
		execute(modifyPrice, new IncreaseProductPriceCommand(product, 50));
		execute(modifyPrice, new DecreaseProductPriceCommand(product, 25));
		System.out.println(product);
	}
	private static void execute(ModifyPrice modifyPrice, Command productCommand) {
		modifyPrice.setCommand(productCommand);
		modifyPrice.invoke();
	}
}
