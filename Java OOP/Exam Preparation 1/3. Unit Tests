/*You will receive a skeleton with Astronaut and Spaceship classes inside. The class will have some methods, fields and one 
constructor, which are working properly. You are NOT ALLOWED to change any class. Cover the whole class with unit tests to make
sure that the class is working as intended.
You are provided with a unit test project in the project skeleton.
Note: The Spaceship you need to test is in the package blueOrigin, so zip package blueOrigin.
Do NOT use Mocking in your unit tests!*/

package blueOrigin;
public class Astronaut {
    private String name;
    private double oxygenInPercentage;
    public Astronaut(String name, double oxygenInPercentage) {
        this.name = name;
        this.oxygenInPercentage = oxygenInPercentage;
    }
    public String getName() {
        return this.name;
    }
    public double getOxygenInPercentage() {
        return this.oxygenInPercentage;
    }
}

package blueOrigin;
import java.util.ArrayList;
import java.util.Collection;
public class Spaceship {
    private static final String INVALID_SPACESHIP_NAME = "Invalid spaceship name!";
    private static final String INVALID_CAPACITY = "Invalid capacity!";
    private static final String SPACESHIP_FULL = "Spaceship is full!";
    private static final String ASTRONAUT_EXIST = "Astronaut %s is already in!";
    private static final int ZERO_CAPACITY = 0;
    private int capacity;
    private String name;
    private Collection<Astronaut> astronauts;
    public Spaceship(String name, int capacity) {
        this.setName(name);
        this.setCapacity(capacity);
        this.astronauts = new ArrayList<>();
    }
    public int getCount() {
        return this.astronauts.size();
    }
    public String getName() {
        return this.name;
    }
    public int getCapacity() {
        return this.capacity;
    }
    public void add(Astronaut astronaut) {
        if (astronauts.size() == this.getCapacity()) {
            throw new IllegalArgumentException(SPACESHIP_FULL);
        }
        boolean astronautExists = this.astronauts
                .stream()
                .anyMatch(a -> a.getName().equals(astronaut.getName()));
        if (astronautExists) {
            throw new IllegalArgumentException(String.format(ASTRONAUT_EXIST, astronaut.getName()));
        }
        this.astronauts.add(astronaut);
    }
    public boolean remove(String astronautName) {
        Astronaut astronaut = this.astronauts
                .stream()
                .filter(a -> a.getName().equals(astronautName))
                .findFirst()
                .orElse(null);
        boolean isRemove = this.astronauts.remove(astronaut);
        return isRemove;
    }
    private void setCapacity(int capacity) {
        if (capacity < ZERO_CAPACITY) {
            throw new IllegalArgumentException(INVALID_CAPACITY);
        }
        this.capacity = capacity;
    }
    private void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new NullPointerException(INVALID_SPACESHIP_NAME);
        }
        this.name = name;
    }
}

package blueOrigin;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
public class SpaceshipTests {
	private Astronaut astronaut;
	private Spaceship spaceship;
    @Before
    public void setup() {
    	this.astronaut = new Astronaut("Gosho", 98.2);
    	this.spaceship = new Spaceship("Dragon", 3);
    }
    @Test
    public void testGetCountReturnsCorrectCountOfAstronautsInShip() {
    	this.spaceship.add(astronaut);
    	Assert.assertEquals(1, this.spaceship.getCount());
    }
    @Test
    public void testGetNameReturrnsCorrectSpaceshipName() {
    	Assert.assertEquals("Dragon", this.spaceship.getName());
    }
    @Test
    public void testGetCapacityReturnsCorrectMaxCapacityOfTheSpaceship() {
    	Assert.assertEquals(3, this.spaceship.getCapacity());
    }
    @Test (expected = IllegalArgumentException.class)
    public void testAddThrowsWhenAstronautIsAlreadyAdded() {
    	this.spaceship.add(astronaut);
    	this.spaceship.add(astronaut);
    }
    @Test (expected = IllegalArgumentException.class)
    public void testAddThrowsWhenFull() {
    	this.spaceship.add(astronaut);
    	this.spaceship.add(new Astronaut("Pesho", 52.4));
    	this.spaceship.add(new Astronaut("Kristina", 86));
    	this.spaceship.add(new Astronaut("Muhlio", 22));
    }
    @Test
    public void testRemoveCorrectlyDeleteAstronaut() {
    	this.spaceship.add(astronaut);
    	this.spaceship.add(new Astronaut("Pesho", 52.4));
    	this.spaceship.add(new Astronaut("Kristina", 86));
    	Assert.assertTrue(this.spaceship.remove("Pesho"));
    	Assert.assertEquals(2, this.spaceship.getCount());
    }
    @Test
    public void testRemoveDidNotRemoveNotExistingAstronaut() {
    	this.spaceship.add(astronaut);
    	Assert.assertFalse(this.spaceship.remove("Misho"));
    }
    @Test (expected = IllegalArgumentException.class)
    public void testSetCapacityThrowWhenSetBelowZero() {
    	Spaceship spaceCraft = new Spaceship("Eww", -3);
    }
    @Test (expected = NullPointerException.class)
    public void testSetNameThrowsWhenInvalidNameIsDeclared() {
    	Spaceship spaceCraft = new Spaceship(null, 0);
    }
}
