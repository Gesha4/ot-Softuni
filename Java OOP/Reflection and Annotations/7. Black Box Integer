/*You are helping a buddy of yours who is still in the OOP Basics course - his name is Peshoslav (not to be mistaken with real
people or trainers). He is rather slow and made a class with all private members. Your tasks are to instantiate an object from 
his class (always with start value 0) and then invoke the different methods it has. Your restriction is to not change anything
in the class itself (consider it a black box). You can look at his class but don't touch anything! The class itself is called 
BlackBoxInt. It is a wrapper for the int primitive. 
Input
The input will consist of lines in the form:
"<command name>_<value>"
Example: add_115
Input will always be valid and in the format described, so there is no need to check it explicitly. You stop receiving input 
when you encounter the command "END".
Output
Each command (except the END one) should print the current value of innerValue of the BlackBoxInt object you instantiated. 
Don't cheat by overriding toString in the class - you must get the value from the private field.*/

package blackBoxInteger;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;
public class Main {
    public static void main(String[] args) throws NoSuchMethodException, SecurityException, 
    InstantiationException, IllegalAccessException, IllegalArgumentException, 
    InvocationTargetException, NoSuchFieldException {
    	Scanner scan = new Scanner(System.in);
    	Constructor<?> ctor = BlackBoxInt.class.getDeclaredConstructor();
    	ctor.setAccessible(true);
    	BlackBoxInt blackBox = (BlackBoxInt) ctor.newInstance();
    	Map<String, Method> methodsByName = Arrays.stream(blackBox.getClass().getDeclaredMethods())
    			.peek(m -> m.setAccessible(true))
    			.collect(Collectors.toMap(m -> m.getName(), m -> m));
    	Field innerValue = blackBox.getClass().getDeclaredField("innerValue");
    	innerValue.setAccessible(true);
    	int value = innerValue.getInt(blackBox);
    	String line = scan.nextLine();
    	while(!line.equals("END")) {
    		String[] tokens = line.split("_");
    		String command = tokens[0];
    		int input = Integer.parseInt(tokens[1]);
    		Method method = methodsByName.get(command);
    		method.invoke(blackBox, input);
    		value = innerValue.getInt(blackBox);
    		System.out.println(value);
    		line = scan.nextLine();
    	}
    }
}

package blackBoxInteger;
public class BlackBoxInt {
	private static final int DEFAULT_VALUE = 0;
	private int innerValue;
	private BlackBoxInt(int innerValue) {
		this.innerValue = innerValue;
	}
	private BlackBoxInt() {
		this.innerValue = DEFAULT_VALUE;
	}
	private void add(int addend) {
		this.innerValue += addend;
	}
	private void subtract(int subtrahend) {
		this.innerValue -= subtrahend;
	}
	private void multiply(int multiplier) {
		this.innerValue *= multiplier;
	}
	private void divide(int divider) {
		this.innerValue /= divider;
	}
	private void leftShift(int shifter) {
		this.innerValue <<= shifter;
	}
	private void rightShift(int shifter) {
		this.innerValue >>= shifter;
	}
}
