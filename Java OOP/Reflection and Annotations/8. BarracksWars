/*You are given a small console based project called Barracks (the code for it is included in the provided skeleton).
The general functionality the project has is adding new units to its repository and printing a report with statistics about the 
units currently in the repository. First let's go over the original task before the project was created:
Input
The input consists of commands each on a separate line. Commands that execute the functionality are:
•	add <Archer/Swordsman/Pikeman/{…}> - adds a unit to the repository.
•	report - prints a lexicological ordered statistic about the units in the repository.
•	fight - ends the input.
Output
Each command except fight should print output on the console.
•	add should print: "<Archer/Swordsman/Pikeman/{…}> added!"
•	report should print all the info in the repository in the format: "<UnitType> -> <UnitQuantity>", sorted by UnitType
Constraints
•	Input will consist of no more than 1000 lines
•	report command will never be given before any valid add command was provided
Your Task
1) You have to study the code of the project and figure out how it works. However, there are parts of it that are not 
implemented (left with TODOs (TODO window will be useful)). You must implement the functionality of the createUnit method in 
the UnitFactoryImpl class so that it creates a unit based on the unit type received as parameter. Implement it in such a way 
that whenever you add a new unit it will be creatable without the need to change anything in the UnitFactoryImpl class (psst 
- use reflection). You can use the approach called Simple Factory.
2) Add two new unit classes (there will be tests that require them) - Horseman with 50 health and 10 attack and Gunner with 20
health and 20 attack.
If you do everything correctly for this problem, you should write code only in the factories and units packages.

As you might have noticed commands in the project from Problem 3 are implemented via a switch case with method calls in the
Engine class. Although this approach works it is flawed when you add a new command because you have to add a new case for it.
In some projects you might not have access to the engine and this would not work. Imagine this project will be outsourced and 
the outsourcing firm will not have access to the engine. Make it so whenever they want to add a new command they won't have to
change anything in the Engine.
To do so employ the design pattern called Command Pattern.
Notice how all commands that extend this one will have both a Repository and a UnitFactory although not all of them need these.
Leave it like this for this problem, because for the reflection to work we need all constructors to accept the same parameters.
We will see how to go around this issue in Problem 5.
Once you've implemented the pattern add a new command. It will have the following syntax:
•	retire <UnitType> - All it has to do is remove a unit of the provided type from the repository.
o	If there are no such units currently in the repository print: "No such units in repository."
o	If there is such a unit currently in the repository, print: "<UnitType> retired!"
To implement this command, you will also have to implement a corresponding method in the UnitRepository.
If you do everything correctly for this problem, you should write/refactor code only in the core and data packages.*/

package barracksWars.interfaces;
public interface Attacker {
    int getAttackDamage();
}

package barracksWars.interfaces;
public interface CommandInterpreter {
	Executable interpretCommand(String[] data, String commandName);
}

package barracksWars.interfaces;
public interface Destroyable {
    int getHealth();
    void setHealth(int health);
}

package barracksWars.interfaces;
public interface Executable {
	String execute();
}

package barracksWars.interfaces;
public interface Repository {
	void addUnit(Unit unit);
	String getStatistics();
	void removeUnit(String unitType);
}

package barracksWars.interfaces;
public interface Runnable {
	void run();
}

package barracksWars.interfaces;
public interface Unit extends Destroyable, Attacker {
}

package barracksWars.interfaces;
public interface UnitFactory {
    Unit createUnit(String unitType);
}

package barracksWars.models.units;
import barracksWars.interfaces.Unit;
public abstract class AbstractUnit implements Unit {
    private int health;
    private int attackDamage;
    protected AbstractUnit(int health, int attackDamage) {
        this.initHealth(health);
        this.setAttackDamage(attackDamage);
    }
    private void initHealth(int health) {
        if (health <= 0) {
            throw new IllegalArgumentException("Initial health should be positive.");
        }
        
        this.health = health;
    }
    @Override
    public int getHealth() {
        return this.health;
    }
    @Override
    public void setHealth(int health) {
        if (health < 0) {
            this.health = 0;
        } else {
            this.health = health;
        }
    }
    @Override
    public int getAttackDamage() {
        return this.attackDamage;
    }
    private void setAttackDamage(int attackDamage) {
        if (attackDamage <= 0) {
            throw new IllegalArgumentException("Attack damage should be positive.");
        }
        
        this.attackDamage = attackDamage;
    }    
}

package barracksWars.models.units;
public class Archer extends AbstractUnit {
    private static final int ARCHER_HEALTH = 25;
    private static final int ARCHER_DAMAGE = 7;
    public Archer() {
        super(ARCHER_HEALTH, ARCHER_DAMAGE);
    }
}

package barracksWars.models.units;
public class Gunner extends AbstractUnit{
	private static final int GUNNER_HEALTH = 20;
    private static final int GUNNER_DAMAGE = 20;
	public Gunner() {
		super(GUNNER_HEALTH, GUNNER_DAMAGE);
	}
}

package barracksWars.models.units;
public class Horseman extends AbstractUnit{
	private static final int HORSEMAN_HEALTH = 50;
    private static final int HORSEMAN_DAMAGE = 10;
	public Horseman() {
		super(HORSEMAN_HEALTH, HORSEMAN_DAMAGE);
	}
}

package barracksWars.models.units;
public class Pikeman extends AbstractUnit {
	private static final int PIKEMAN_HEALTH = 30;
	private static final int PIKEMAN_DAMAGE = 15;
	public Pikeman() {
		super(PIKEMAN_HEALTH, PIKEMAN_DAMAGE);
	}
}

package barracksWars.models.units;
public class Swordsman extends AbstractUnit {
    private static final int SWORDSMAN_HEALTH = 40;
    private static final int SWORDSMAN_DAMAGE = 13;
    public Swordsman() {
        super(SWORDSMAN_HEALTH, SWORDSMAN_DAMAGE);
    }
}

package barracksWars.data;
import barracksWars.interfaces.Repository;
import barracksWars.interfaces.Unit;
import java.util.Map;
import java.util.TreeMap;
public class UnitRepository implements Repository {
	private Map<String, Integer> amountOfUnits;
	public UnitRepository() {
		this.amountOfUnits = new TreeMap<>();
	}
	public void addUnit(Unit unit) {
		String unitType = unit.getClass().getSimpleName();
		if (!this.amountOfUnits.containsKey(unitType)) {
			this.amountOfUnits.put(unitType, 0);
		}
		int newAmount = this.amountOfUnits.get(unitType) + 1;
		this.amountOfUnits.put(unitType, newAmount);
	}
	public String getStatistics() {
		StringBuilder statBuilder = new StringBuilder();
		for (Map.Entry<String, Integer> entry : amountOfUnits.entrySet()) {
			String formatedEntry =
					String.format("%s -> %d%n", entry.getKey(), entry.getValue());
			statBuilder.append(formatedEntry);
		}
		statBuilder.setLength(
				statBuilder.length() - System.lineSeparator().length());

		return statBuilder.toString();
	}
	public void removeUnit(String unitType) {
		Integer integer = this.amountOfUnits.get(unitType);
		if(integer != null) {
			int newCount = integer - 1;
			if(newCount >= 0) {
				this.amountOfUnits.put(unitType, newCount);
			}
		} else {
			throw new IllegalArgumentException("No such unit in repository.");
		}
	}
}

package barracksWars.core.factories;
import java.lang.reflect.Constructor;
import barracksWars.interfaces.Unit;
import barracksWars.interfaces.UnitFactory;
public class UnitFactoryImpl implements UnitFactory {
	private static final String UNITS_PACKAGE_NAME =
			"barracksWars.models.units.";
	@Override
	public Unit createUnit(String unitType) {
		Class<?> clazz;
		try {
			clazz = Class.forName(UNITS_PACKAGE_NAME + unitType);
			Constructor<?> ctor = clazz.getDeclaredConstructor();
			return (Unit) ctor.newInstance();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}

package barracksWars.core.commands;
import barracksWars.interfaces.Repository;
import barracksWars.interfaces.Unit;
import barracksWars.interfaces.UnitFactory;
public class AddCommand extends Command{
	public AddCommand(String[] data, UnitFactory unitFactory, Repository repository) {
		super(data, unitFactory, repository);
	}
	@Override
	public String execute() {
		String unitType = super.getData()[1];
		Unit unitToAdd = this.getUnitFactory().createUnit(unitType);
		this.getRepository().addUnit(unitToAdd);
		String output = unitType + " added!";
		return output;
	}
}

package barracksWars.core.commands;
import barracksWars.interfaces.Executable;
import barracksWars.interfaces.Repository;
import barracksWars.interfaces.UnitFactory;
public abstract class Command implements Executable{
	private String[] data;
	private UnitFactory unitFactory;
	private Repository repository;
	protected Command(String[] data, UnitFactory unitFactory, Repository repository) {
		this.data = data;
		this.unitFactory = unitFactory;
		this.repository = repository;
	}
	protected String[] getData() {
		return data;
	}
	protected UnitFactory getUnitFactory() {
		return unitFactory;
	}
	protected Repository getRepository() {
		return repository;
	}
}

package barracksWars.core.commands;
import barracksWars.interfaces.Repository;
import barracksWars.interfaces.UnitFactory;
public class FightCommand extends Command{
	public FightCommand(String[] data, UnitFactory unitFactory, Repository repository) {
		super(data, unitFactory, repository);
	}
	@Override
	public String execute() {
		return "fight";
	}
}

package barracksWars.core.commands;
import barracksWars.interfaces.Repository;
import barracksWars.interfaces.UnitFactory;
public class ReportCommand extends Command{
	public ReportCommand(String[] data, UnitFactory unitFactory, Repository repository) {
		super(data, unitFactory, repository);
	}
	@Override
	public String execute() {
		return this.getRepository().getStatistics();
	}
}

package barracksWars.core.commands;
import barracksWars.interfaces.Repository;
import barracksWars.interfaces.UnitFactory;
public class RetireCommand extends Command{
	protected RetireCommand(String[] data, UnitFactory unitFactory, Repository repository) {
		super(data, unitFactory, repository);
	}
	@Override
	public String execute() {
		String unitTipe = this.getData()[1];
		try {
			this.getRepository().removeUnit(unitTipe);
			return unitTipe + " retired!";
		} catch (IllegalArgumentException e) {
			return e.getMessage();
		}
	}
}

package barracksWars.core;
import barracksWars.interfaces.Executable;
import barracksWars.interfaces.Repository;
import barracksWars.interfaces.Runnable;
import barracksWars.interfaces.UnitFactory;
import jdk.jshell.spi.ExecutionControl;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
public class Engine implements Runnable {
	private Repository repository;
	private UnitFactory unitFactory;
	public Engine(Repository repository, UnitFactory unitFactory) {
		this.repository = repository;
		this.unitFactory = unitFactory;
	}
	@Override
	public void run() {
		BufferedReader reader = new BufferedReader(
				new InputStreamReader(System.in));
		while (true) {
			try {
				String input = reader.readLine();
				String[] data = input.split("\\s+");
				String commandName = data[0];
				String result = null;
				try {
					result = interpretCommand(data, commandName);
				} catch (NoSuchMethodException | InstantiationException | IllegalAccessException
						| InvocationTargetException e) {
					e.printStackTrace();
				}
				if (result.equals("fight")) {
					break;
				}
				System.out.println(result);
			} catch (RuntimeException e) {
				System.out.println(e.getMessage());
			} catch (IOException | ExecutionControl.NotImplementedException e) {
				e.printStackTrace();
			}
		}
	}
	private String interpretCommand(String[] data, String commandName) throws 
	ExecutionControl.NotImplementedException, NoSuchMethodException, SecurityException, 
	InstantiationException, IllegalAccessException, IllegalArgumentException, 
	InvocationTargetException {
		Executable executable = null;
		try {
			Class<?> command = Class.forName(getCorrectCommandName(commandName));
			Constructor<?> ctor = command.getDeclaredConstructor(String[].class, UnitFactory.class,
					Repository.class);
			ctor.setAccessible(true);
			executable = (Executable) ctor.newInstance(data, this.unitFactory, this.repository);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return executable.execute();
	}
	private String getCorrectCommandName(String commandName) {
		String packagee = "barracksWars.core.commands.";
		String substring = commandName.substring(1);
		String name = Character.toUpperCase(commandName.charAt(0)) + substring;
		return packagee + name + "Command";
	}
}

package barracksWars;
import barracksWars.interfaces.Repository;
import barracksWars.interfaces.Runnable;
import barracksWars.interfaces.UnitFactory;
import barracksWars.core.Engine;
import barracksWars.core.factories.UnitFactoryImpl;
import barracksWars.data.UnitRepository;
public class Main {
    public static void main(String[] args) {
        Repository repository = new UnitRepository();
        UnitFactory unitFactory = new UnitFactoryImpl();
        Runnable engine = new Engine(repository, unitFactory);
        engine.run();
    }
}
