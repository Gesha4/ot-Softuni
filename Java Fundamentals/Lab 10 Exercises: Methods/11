
//The array may be manipulated by one of the following commands:
//exchange {index} – splits the array after the given index and exchanges the places of the two resulting
//subarrays. E.g. [1, 2, 3, 4, 5] -> exchange 2 ->; result: [4, 5, 1, 2, 3]
//If the index is outside the boundaries of the array, print "Invalid index".
//max even/odd– returns the INDEX of the max even/odd element -> [1, 4, 8, 2, 3] -> max odd -> print 4
//min even/odd – returns the INDEX of the min even/odd element -> [1, 4, 8, 2, 3] -> min even -> print 3
//If there are two or more equal min/max elements, return the index of the rightmost one.
//If a min/max even/odd element cannot be found, print "No matches".
//first {count} even/odd– returns the first {count} elements -> [1, 8, 2, 3] -> first 2 even -> print [8, 2]
//last {count} even/odd – returns the last {count} elements -> [1, 8, 2, 3] -> last 2 odd -> print [1, 3]
//If the count is greater than the array length, print "Invalid count".
//If there are not enough elements to satisfy the count, print as many as you can. If there are zero
//even/odd elements, print an empty array "[]".
//end – stop taking input and print the final state of the array.

import java.util.Scanner;
import java.util.Arrays;

public class zadachi {

	public static int[] exchange(int[] arg1, String arg2) {
		int index = Integer.parseInt(arg2);
		if (index > arg1.length || index < 0) {
			System.out.println("Invalid index");
			return arg1;
		} else {
			int[] exchanged= new int[arg1.length];
			int j = 0;
			for (int i = index + 1; i < arg1.length; i++) {
				exchanged[j] = arg1[i];
				j++;
			}
			for (int i = 0; i <= index; i++) {
				exchanged[j] = arg1[i];
				j++;
			}
			System.out.print("[");
			for (int i = 0; i < exchanged.length; i++) {
				System.out.print(exchanged[i]);
				if (i != exchanged.length - 1) {
					System.out.print(",");
				}
			}
			System.out.print("]");
			System.out.println();
			return exchanged;
		}
	}
	
	public static void maxEven(int[] arg) {
		int even = Integer.MIN_VALUE;
		int index = 0;
		for (int i = 0; i < arg.length; i++) {
			if (arg[i] % 2 == 0) {
				if (arg[i] >= even) {
					even = arg[i];
					index = i;
				}
			}
		}
		if (even == Integer.MIN_VALUE) {
			System.out.print("No matches");
		} else {
			System.out.print(index);
		}
		System.out.println();
	}
	
	public static void maxOdd(int[] arg) {
		int odd = Integer.MIN_VALUE;
		int index = 0;
		for (int i = 0; i < arg.length; i++) {
			if (arg[i] % 2 != 0) {
				if (arg[i] >= odd) {
					odd = arg[i];
					index = i;
				}
			}
		}
		if (odd == Integer.MIN_VALUE) {
			System.out.print("No matches");
		} else {
			System.out.print(index);
		}
		System.out.println();
	}
	
	public static void minEven(int[] arg) {
		int even = Integer.MAX_VALUE;
		int index = 0;
		for (int i = 0; i < arg.length; i++) {
			if (arg[i] % 2 == 0) {
				if (arg[i] <= even) {
					even = arg[i];
					index = i;
				}
			}
		}
		if (even == Integer.MAX_VALUE) {
			System.out.print("No matches");
		} else {
			System.out.print(index);
		}
		System.out.println();
	}
	
	public static void minOdd(int[] arg) {
		int odd = Integer.MAX_VALUE;
		int index = 0;
		for (int i = 0; i < arg.length; i++) {
			if (arg[i] % 2 != 0) {
				if (arg[i] <= odd) {
					odd = arg[i];
					index = i;
				}
			}
		}
		if (odd == Integer.MAX_VALUE) {
			System.out.print("No matches");
		} else {
			System.out.print(index);
		}
		System.out.println();
	}
	
	public static void firstEven(int[] arg1, int arg2) {
		if (arg2 > arg1.length) {
			System.out.println("Invalid count");
		} else {
			String string = "";
			int count = 0;
			for (int i = 0; i < arg1.length; i++) {
				if (arg1[i] % 2 == 0) {
					string += arg1[i];
					count++;
				}
				if (count == arg2) {
					break;
				}
			}
			System.out.print("[");
			for (int i = 0; i < string.length(); i++) {
				System.out.print(string.charAt(i));
				if (i != string.length() - 1) {
					System.out.print(",");
				}
			}
			System.out.print("]");
			System.out.println();
		}
	}
	
	public static void firstOdd(int[] arg1, int arg2) {
		if (arg2 > arg1.length) {
			System.out.println("Invalid count");
		} else {
			String string = "";
			int count = 0;
			for (int i = 0; i < arg1.length; i++) {
				if (arg1[i] % 2 != 0) {
					string += arg1[i];
					count++;
				}
				if (count == arg2) {
					break;
				}
			}
			System.out.print("[");
			for (int i = 0; i < string.length(); i++) {
				System.out.print(string.charAt(i));
				if (i != string.length() - 1) {
					System.out.print(",");
				}
			}
			System.out.print("]");
			System.out.println();
		}
	}
	
	public static void lastEven(int[] arg1, int arg2) {
		if (arg2 > arg1.length) {
			System.out.println("Invalid count");
		} else {
			String string = "";
			int count = 0;
			for (int i = arg1.length - 1; i >= 0; i--) {
				if (arg1[i] % 2 == 0) {
					string += arg1[i];
					count++;
				}
				if (count == arg2) {
					break;
				}
			}
			System.out.print("[");
			for (int i = string.length() - 1; i >= 0; i--) {
				System.out.print(string.charAt(i));
				if (i != 0) {
					System.out.print(",");
				}
			}
			System.out.print("]");
			System.out.println();
		}
	}
	
	public static void lastOdd(int[] arg1, int arg2) {
		if (arg2 > arg1.length) {
			System.out.println("Invalid count");
		} else {
			String string = "";
			int count = 0;
			for (int i = arg1.length - 1; i >= 0; i--) {
				if (arg1[i] % 2 != 0) {
					string += arg1[i];
					count++;
				}
				if (count == arg2) {
					break;
				}
			}
			System.out.print("[");
			for (int i = string.length() - 1; i >= 0; i--) {
				System.out.print(string.charAt(i));
				if (i != 0) {
					System.out.print(",");
				}
			}
			System.out.print("]");
			System.out.println();
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String line = scan.nextLine();
		String[] splitLine = line.split(" ");
		int [] nums = Arrays.stream(splitLine).mapToInt(Integer::parseInt).toArray();
		String manipulation = scan.nextLine();
		while (!manipulation.equals("end")) {
		String[] command = manipulation.split(" ");
		switch(command[0]) {
		case "exchange": nums = exchange(nums, command[1]);break;
		case "max": if(command[1].equals("even")) {
					maxEven(nums);break;
					} else {
						maxOdd(nums);break;
					}
		case "min": if(command[1].equals("even")) {
					minEven(nums);break;
					} else {
						minOdd(nums);break;
					}
		case "first": if(command[2].equals("even")) {
						firstEven(nums, Integer.parseInt(command[1]));break;
						} else {
							firstOdd(nums,Integer.parseInt(command[1]));break;
						}
		case "last": if(command[2].equals("even")) {
					lastEven(nums, Integer.parseInt(command[1]));break;
					} else {
						lastOdd(nums, Integer.parseInt(command[1]));break;
					}
		}
		manipulation = scan.nextLine();
		}
	}
}
