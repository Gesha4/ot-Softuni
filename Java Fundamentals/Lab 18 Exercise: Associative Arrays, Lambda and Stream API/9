//The force users are struggling to remember which side are the different forceUsers from, because they
//switch them too often. So you are tasked to create a web application to manage their profiles. 
//You should store information for every unique forceUser, registered in the application.
//You will receive several input lines in one of the following formats:
//{forceSide} | {forceUser}
//{forceUser} -> {forceSide}
//The forceUser and forceSide are strings, containing any character.
//If you receive forceSide | forceUser you should check if such forceUser already exists, and if not - 
//add him/her to the corresponding side. If you receive a forceUser -> forceSide you should check if 
//there is such forceUser already and if so,change his/her side. If there is no such forceUser, add 
//him/her to the corresponding forceSide, treating the command as new registered forceUser. Then you 
//should print on the console: "{forceUser} joins the {forceSide} side!" You should end your program 
//when you receive the command "Lumpawaroo". At that point you should print each force side, ordered 
//descending by forceUsers count, than ordered by name. For each side print the forceUsers, ordered by 
//name. In case there are no forceUsers in a side, you shouldn't print the side information.
//Input / Constraints
//•	The input comes in the form of commands in one of the formats specified above
//•	The input ends when you receive the command "Lumpawaroo"
//Output
//•	As output for each forceSide, ordered descending by forceUsers count, then by name, you must print all the forceUsers, ordered by name alphabetically
//•	The output format is:
//Side: {forceSide}, Members: {forceUsers.Count}
//! {forceUser}
//! {forceUser}
//! {forceUser}
//•	In case there are NO forceUsers, don't print this side

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class zadachi {
	
	public static void print(String side, List<String> names) {
		System.out.println("Side: " + side + ", Members: " + names.size());
		names.sort((n1, n2) -> n1.compareTo(n2));
		for(String name : names) {
			System.out.println("! " + name);
		}
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		Map<String, List<String>> force = new TreeMap<>();
		List<String> sides = new ArrayList<>(3);
		String input = scan.nextLine();
		while(!input.equals("Lumpawaroo")) {
			if(input.contains("|")) {
				String[] command = input.split(" | ");
				if(!force.containsKey(command[0])) {
					sides.add(command[0]);
					force.put(command[0], new ArrayList<String>());
					force.get(command[0]).add(command[2]);
				} else {
					if(!force.get(command[0]).contains(command[2])) {
						force.get(command[0]).add(command[2]);
					}
				}
			} else {
				String[] command = input.split(" -> ");
				if(command[1].equals(sides.get(0))){
					if(force.get(sides.get(1)).contains(command[0])) {
						force.get(sides.get(0)).add(command[0]);
						force.get(sides.get(1)).remove(command[0]);
						System.out.println(command[0] + " joins the " + command[1] + " side!");
					} else if(!force.get(sides.get(0)).contains(command[0])) {
						force.get(sides.get(0)).add(command[0]);
						System.out.println(command[0] + " joins the " + command[1] + " side!");
					}
				} else {
					if(force.get(sides.get(0)).contains(command[0])) {
						force.get(sides.get(1)).add(command[0]);
						force.get(sides.get(0)).remove(command[0]);
						System.out.println(command[0] + " joins the " + command[1] + " side!");
					} else if(!force.get(sides.get(1)).contains(command[0])) {
						force.get(sides.get(1)).add(command[0]);
						System.out.println(command[0] + " joins the " + command[1] + " side!");
					}
				}
			}
			input = scan.nextLine();
		}
		if(force.get(sides.get(0)).size() > force.get(sides.get(1)).size()) {
			print(sides.get(0), force.get(sides.get(0)));
		} else if(force.get(sides.get(1)).size() > force.get(sides.get(0)).size()) {
			print(sides.get(1), force.get(sides.get(1)));
		} else {
			for(Map.Entry<String, List<String>> f : force.entrySet()) {
				if(f.getValue().size() > 0) {
					print(f.getKey(), f.getValue());
				}
			}
		}
	}
}
