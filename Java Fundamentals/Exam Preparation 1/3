//Write a program that decrypts messages. You’re going to receive a few notes that contain the following information:
//•	Name of racer - Consists only of letters. It is surrounded from the both sides by any of the following symbols – "#, $, %, *, &".
//Both symbols – in the beginning and at the end of the name should match. 
//•	Length of geohashcode - Begins after the "=" sign and it is consisted only of numbers.
//•	Encrypted geohash code - Begins after these symbols - “!!”. It may contain anything and the message always ends with it.
//Examples for valid input: #SteveHislop#=16!!tv5dekdz8x11ddkc
//Examples of invalid input: %GiacomoAgostini$=7!!tv58ycb – The length is the same, but the name is not surrounded by matching signs.
//$GeoffDuke$=6!!tuvz26n35dhe4w4 – The length doesn't match the lengh of the code.
//&JoeyDunlop&!!tvndjef67t=14 – The length should be before the code.
//The information must be in the given order, otherwise it is considered invalid. The geohash code you are looking for is with length
//exactly as much as the given length in the message. To decrypt the code you need to increase the value of each symbol from the 
//geohashcode with the given length. If you find a match, you have to print the following message:
//"Coordinates found! {nameOfRacer} -> {geohashcode}" and stop the program. Otherwise, after every invalid message print: "Nothing found!"
//Input / Constraints
//•	You will be receiving strings.
//•	There will always be a valid message.
//Output
//•	If you find the right coordinates, print: "Coordinates found! {nameOfRacer} -> {geohashcode}".
//•	Otherwise, print: "Nothing found!".

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class zadachi {
	
	public static boolean checkMatch(String str) {
		Pattern pattern = Pattern.compile("([#$%&*])(?<name>[A-Za-z]+)\\1=(?<lenght>\\d+)!!(?<geohash>.+)");
		Matcher matcher = pattern.matcher(str);
		if(matcher.find()) {
			return true;
		} else {
			return false;
		}
	}
	
	public static boolean checkLenght(String str) {
		boolean check = false;
		Pattern pattern = Pattern.compile("([#$%&*])(?<name>[A-Za-z]+)\\1=(?<lenght>\\d+)!!(?<geohash>.+)");
		Matcher matcher = pattern.matcher(str);
		if(matcher.find()) {
			int lenght = Integer.parseInt(matcher.group("lenght"));
			String geohash = matcher.group("geohash");
			if(lenght == geohash.length()) {
				check = true;
			}
		}
		return check;
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String input = scan.nextLine();
		boolean match = false;
		if(checkMatch(input) & checkLenght(input)) {
			match = true;
		} else {
			System.out.println("Nothing found!");
		}
		while(!match){
			input = scan.nextLine();
			if(checkMatch(input) & checkLenght(input)) {
				match = true;
			} else {
				System.out.println("Nothing found!");
			}	
		}
		Pattern pattern = Pattern.compile("([#$%&*])(?<name>[A-Za-z]+)\\1=(?<lenght>\\d+)!!(?<geohash>.+)");
		Matcher matcher = pattern.matcher(input);
		matcher.find();
		String name = matcher.group("name");
		String geohashcode = matcher.group("geohash");
		int key = Integer.parseInt(matcher.group("lenght"));
		StringBuilder decrypted = new StringBuilder();
		for(int i = 0; i < geohashcode.length(); i++) {
			char newChar = (char)(geohashcode.charAt(i) + key);
			decrypted.append(newChar);
		}
		System.out.println("Coordinates found! " + name + " -> " + decrypted);
	}
}
