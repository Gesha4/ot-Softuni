
//You will receive the DNA length and until you receive the command "Clone them!" you will be 
//receiving a DNA sequences of ones and zeroes, split by "!" (one or several). You should select
//the sequence with the longest subsequence of ones. If there are several sequences with same
//length of subsequence of ones, print the one with the leftmost starting index, if there are 
//several sequences with same length and starting index, select the sequence with the greater 
//sum of its elements. After you receive the last command "Clone them!" you should print the 
//collected information in the following format:
//"Best DNA sample {bestSequenceIndex} with sum: {bestSequenceSum}."
//"{DNA sequence, joined by space}"

import java.util.Arrays;
import java.util.Scanner;

public class zadachi {
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int lenght = scan.nextInt();
		scan.nextLine();
		String input = scan.nextLine();
		int[] tempNums = new int[lenght];
		int count = 0;
		int row = 1;
		int sum = 0;
		int index = 0;
		int tempCount = 0;
		int tempIndex = 0;
		int tempSum = 0;
		int tempRow = 1;
		do {
			String[] str = input.split("!");
			int[] nums = Arrays.stream(str).mapToInt(Integer::parseInt).toArray();
			for (int i = 0; i < lenght; i++) {
				if (nums[i] == 1) {
					tempCount++;
					tempSum++;
					if (tempCount == 1) {
						tempIndex = i;
					}
					if (tempCount > count) {
						count = tempCount;
						index = tempIndex;
						tempNums = nums;
						row = tempRow;
					}
				} else {
					tempCount = 0;
				}
			}
			if (tempNums == nums) {
				sum = tempSum;
			}
			if (tempCount == count && tempIndex < index) {
				tempNums = nums;
				row = tempRow;
			}
			if (tempCount == count && tempIndex == index && tempSum > sum) {
				tempNums = nums;
				row = tempRow;
			}
			tempCount = 0;
			tempIndex = 0;
			tempSum = 0;
			tempRow++;
			input = scan.nextLine();
		} while (!input.equals("Clone them!"));
		System.out.printf("Best DNA sample %d with sum: %d.", row, sum);
		System.out.print("\n");
		for (int i = 0; i < lenght; i++) {
			System.out.print(tempNums[i] + " ");
		}
	}
}
