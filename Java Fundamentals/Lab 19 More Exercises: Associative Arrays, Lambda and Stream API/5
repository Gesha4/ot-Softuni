//Heroes III is the best game ever. Everyone loves it and everyone plays it all the time. Stamat is no 
//exclusion to this rule. His favorite units in the game are all types of dragons - black, red, gold, 
//azure etc… He likes them so much that he gives them names and keeps logs of their stats: damage, health
//and armor. The process of aggregating all the data is quite tedious, so he would like to have a program
//doing it. Since he is no programmer, it's your task to help him. You need to categorize dragons by their
//type. For each dragon, identified by name, keep information about his stats. Type is preserved as in the
//order of input, but dragons are sorted alphabetically by name. For each type, you should also print the
//average damage, health and armor of the dragons. For each dragon, print his own stats. There may be 
//missing stats in the input, though. If a stat is missing, you should assign it default values. Default
//values are as follows: health 250, damage 45 and armor 10. Missing stat will be marked by null.
//The input is in the following format {type} {name} {damage} {health} {armor}. Any of the integers may be
//assigned null value. See the examples below for better understanding of your task. If the same dragon
//is added a second time, the new stats should overwrite the previous ones. Two dragons are considered 
//equal if they match by both name and type.
//Input
//•	On the first line you are given number N - the number of dragons to follow
//•	On the next N lines you are given input in the format described above. There will be single space separating each element
//Output
//•	Print the aggregated data on the console
//•	For each type print average stats of its dragons in format "{Type}::({damage}/{health}/{armor})"
//•	Damage, health and armor should be rounded to two digits after the decimal separator
//•	For each dragon print its stats in format:
//"-{Name} -> damage: {damage}, health: {health}, armor: {armor}"
//Constraints
//•	N is in range [1…100]
//•	The dragon type and name are one word only, starting with capital letter
//•	Damage, health and armor are integers in range [0 … 100000] or null

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.TreeMap;

public class zadachi {
	
	public static double average (Map<String, int[]> dragons, int position) {
		double sum = 0;
		for(Entry<String, int[]> dragon : dragons.entrySet()) {
			sum += dragon.getValue()[position];
		}
		double average = sum / dragons.size();
		return average;
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		Map<String, Map<String, int[]>> dragons = new LinkedHashMap<>();
		int number = scan.nextInt();
		scan.nextLine();
		for(int i = 0; i < number; i++) {
			String[] input = scan.nextLine().split(" ");
			String type = input[0];
			String name = input[1];
			int [] stats = new int[3];
			if(input[2].equals("null")) {
				stats[0] = 45;
			} else {
				stats[0] = Integer.parseInt(input[2]);
			}
			if(input[3].equals("null")) {
				stats[1] = 250;
			} else {
				stats[1] = Integer.parseInt(input[3]);
			}
			if(input[4].equals("null")) {
				stats[2] = 10;
			} else {
				stats[2] = Integer.parseInt(input[4]);
			}
			if(!dragons.containsKey(input[0])) {
				dragons.put(type, new TreeMap<>());
				dragons.get(type).put(name, stats);
			} else {
				if(!dragons.get(type).containsKey(name)) {
					dragons.get(type).put(name, stats);
				} else {
					dragons.get(type).put(name, stats);
				}
			}
		}
		for(Map.Entry<String, Map<String, int[]>> type : dragons.entrySet()) {
			double avgDamage = average(type.getValue(), 0);
			double avgHealth = average(type.getValue(), 1);
			double avgArmor = average(type.getValue(), 2);
			System.out.printf("%s::(%.2f/%.2f/%.2f)%n", type.getKey(), avgDamage, avgHealth, avgArmor);
			for(Map.Entry<String, int[]> names : type.getValue().entrySet()) {
				System.out.printf("-%s -> damage: %d, health: %d, armor: %d%n", names.getKey(), names.getValue()[0],
						names.getValue()[1], names.getValue()[2]);
			}
		}
	}
}
