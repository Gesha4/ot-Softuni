//Here comes the final and the most interesting part - the Final ranking of the candidate-interns. The 
//final ranking is determined by the points of the interview tasks and from the exams in SoftUni. Here 
//is your final task. You will receive some lines of input in the format "{contest}:{password for contest}" 
//until you receive "end of contests". Save that data because you will need it later. After that you will
//receive other type of inputs in format "{contest}=>{password}=>{username}=>{points}" until you receive 
//"end of submissions". Here is what you need to do: 
//•	Check if the contest is valid (if you received it in the first type of input)
//•	Check if the password is correct for the given contest
//•	Save the user with the contest they take part in (a user can take part in many contests) and the points
//the user has in the given contest. If you receive the same contest and the same user, update the points
//only if the new ones are more than the older ones. At the end you have to print the info for the user 
//with the most points in the format "Best candidate is {user} with total {total points} points.". After 
//that print all students ordered by their names. For each user print each contest with the points in 
//descending order. See the examples.
//Input
//•	Strings in format "{contest}:{password for contest}" until the "end of contests" command. There will be no case with two equal contests
//•	Strings in format "{contest}=>{password}=>{username}=>{points}" until the "end of submissions" command
//•	There will be no case with 2 or more users with same total points!
//Output
//•	On the first line print the best user in format 
//"Best candidate is {user} with total {total points} points.".
//•	Then print all students ordered as mentioned above in format:
//{user1 name}
//#  {contest1} -> {points}
//#  {contest2} -> {points}


import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class zadachi {
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		Map<String, String> pass = new HashMap<>();
		String[] line = scan.nextLine().split(":");
		while(!line[0].equals("end of contests")) {
			pass.put(line[0], line[1]);
			line = scan.nextLine().split(":");
		}
		Map<String, Map<String, Integer>> users = new TreeMap<>();
		String[] input = scan.nextLine().split("=>");
		while(!input[0].equals("end of submissions")) {
			String contest = input[0];
			String password = input[1];
			String name = input[2];
			int points = Integer.parseInt(input[3]);
			if(pass.containsKey(contest) && pass.get(contest).equals(password)) {
				if(!users.containsKey(name)) {
					users.put(name, new HashMap<>());
					users.get(name).put(contest, points);
				} else {
					if (users.get(name).containsKey(contest) && 
							users.get(name).get(contest) < points) {
						users.get(name).put(contest, points);
					} else {
						users.get(name).put(contest, points);
					}
				}
			}
			input = scan.nextLine().split("=>");
		}
		String bestName = "";
		int bestPoints = 0;
		for(Map.Entry<String, Map<String, Integer>> user : users.entrySet()) {
			int currentPoints = 0;
			for(Map.Entry<String, Integer> classes : user.getValue().entrySet()) {
				currentPoints += classes.getValue();
			}
			if(currentPoints > bestPoints) {
				bestPoints = currentPoints;
				bestName = user.getKey();
			}
		}
		System.out.println("Best candidate is " + bestName + " with total " + bestPoints + " points.");
		System.out.println("Ranking: ");
		for(Map.Entry<String, Map<String, Integer>> user : users.entrySet()) {
			System.out.println(user.getKey());
			user.getValue().entrySet().stream().sorted((f, s) -> s.getValue().compareTo(f.getValue()))
			.forEach(entry -> { System.out.println("#  " + entry.getKey() + " -> " + entry.getValue());});
		}
	}
}
