//Create a program that follows given instructions. You will receive a collection of words on a single line, split by a single 
//space. They are not what they are supposed to be, so you have to follow the instructions in order to find the real message. 
//You will be receiving commands. Here are the possible ones:
//-	Delete {index} – removes the word after the given index if it is valid.
//-	Swap {word1} {word2} – find the given words in the collections if they exist and swap their places.
//-	Put {word} {index} – add a word at the previous place {index} before the 
//given one, if it is valid. Note: putting at the last index simply appends the word to the end of the list.
//-	Sort – you must sort the words in descending order.
//-	Replace {word1} {word2} – find the second word {word2} in the collection (if it exists) and replace it with the first word – {word1}.
//Follow them until you receive the "Stop" command. After you have successfully followed the instructions, you must print the words
//on a single line, split by a space.


import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class zadachi {
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String[] messege = scan.nextLine().split(" ");
		List<String> words = new ArrayList<>();
		for (String word : messege) {
			words.add(word);
		}
		String[] command = scan.nextLine().split(" ");
		while (!command[0].equals("Stop")) {
			switch (command[0]) {
			case "Delete" : int index = Integer.parseInt(command[1]);
							if (index >= 0 && index < words.size()) {
								words.remove(index + 1);
							}break;
			case "Swap" : int firstIndex = words.indexOf(command[1]);
						  int secondIndex = words.indexOf(command[2]);
						  if (firstIndex >= 0 && secondIndex >= 0) {
							  String temp = words.get(firstIndex);
							  words.remove(firstIndex);
							  words.add(firstIndex, words.get(secondIndex));
							  words.remove(secondIndex);
							  words.add(secondIndex, temp);
						  }break;
			case "Put" : if (Integer.parseInt(command[2]) == words.size()) {
						words.add(command[1]);
						} else if (Integer.parseInt(command[2]) == 0) {
							words.add(0, command[1]);
						} else {
							words.add(Integer.parseInt(command[2]) - 1, command[1]);break;
						}
			case "Sort" : Collections.reverse(words);break;
			case "Replace" : if (words.contains(command[2])) {
							int index0 = words.indexOf(command[2]);
							words.remove(index0);
							words.add(index0, command[1]);
							}break;
			}
			command = scan.nextLine().split(" ");
		}
		for (String word : words) {
			System.out.print(word + " ");
		}
	}
}
