//You are given a collection of tickets separated by commas and spaces. You need to check every one of them
//if it has a winning combination of symbols. A valid ticket should have exactly 20 characters. The winning
//symbols are '@', '#', '$' and '^'. But in order for a ticket to be a winner the symbol should 
//uninterruptedly repeat for at least 6 times in both the tickets left half and the tickets right half. 
//For example, a valid winning ticket should be something like this: "Cash$$$$$$Ca$$$$$$sh" 
//The left half "Cash$$$$$$" contains "$$$$$$", which is also contained in the tickets right half "Ca$$$$$$sh".
//A winning ticket should contain symbols repeating up to 10 times in both halves, which is considered a 
//Jackpot (for example: "$$$$$$$$$$$$$$$$$$$$").
//Input
//The input will be read from the console. The input consists of a single line containing all tickets separated by commas and one or more white spaces in the format:
//•	"{ticket}, {ticket}, … {ticket}"
//Output
//Print the result for every ticket in the order of their appearance, each on a separate line in the format:
//•	Invalid ticket - "invalid ticket"
//•	No match - "ticket "{ticket}" - no match"
//•	Match with length 6 to 9 - "ticket "{ticket}" - {match length}{match symbol}"
//•	Match with length 10 - "ticket "{ticket}" - {match length}{match symbol} Jackpot!"

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class zadachi {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String[] tickets = scan.nextLine().split(",\\s+");
		for(String ticket : tickets) {
			if(ticket.length() == 20) {
				Pattern regexJackpot = Pattern.compile("[@#$^]{20}");
				Pattern regexMatch = Pattern.compile("[@#$^]{6,9}");
				Matcher jackpot = regexJackpot.matcher(ticket);
				if(jackpot.find()) {
					System.out.println("ticket \"" + ticket + "\" - 10" + ticket.charAt(0) + " Jackpot!");
				} else {
					String firstHalf = ticket.substring(0, 10);
					String secondHalf = ticket.substring(10);
					Matcher first = regexMatch.matcher(firstHalf);
					Matcher second = regexMatch.matcher(secondHalf);
					if(first.find() && second.find() && first.group().equals(second.group())) {
						int size = first.group().length();
						System.out.println("ticket \"" + ticket + "\" - " + size + first.group().charAt(0));
					} else {
						System.out.println("ticket \"" + ticket + "\" - no match");
					}
				}
			} else {
				System.out.println("invalid ticket");
			}
		}
	}
}
