//You read a single line of ASCII symbols, and the message is somewhere inside it, you must find it. The input consists of three
//parts separated with "|" like this: "{firstPart}|{secondPart}|{thirdPart}"
//Each word starts with capital letter and has a fixed length, you can find those in each different part of the input.
//The first part carries the capital letters for each word inside the message. You need to find those capital letters 1 or more 
//from A to Z. The capital letters should be surrounded from the both sides with any of the following symbols – "#, $, %, *, &". 
//And those symbols should match on the both sides. This means that $AOTP$ - is a valid pattern for the capital letters. 
//$AKTP% - is invalid since the symbols do not match. The second part of the data contains the starting letter ASCII code and 
//words length /between 1 – 20 charactes/, in the following format: "{asciiCode}:{length}". For example, "67:05" – means that 
//'67' - ascii code equal to the capital letter "C", represents a word starting with "C" with following 5 characters: like "Carrot".
//The ascii code should be a capital letter equal to a letter from the first part. Word's length should be exactly 2 digits. Length
//less than 10 will always have a padding zero, you don't need to check that. The third part of the message are words separated by
//spaces. Those words have to start with Capital letter [A…Z] equal to the ascii code and have exactly the length for each capital
//letter you have found in the second part. Those words can contain any ASCII symbol without spaces.When you find valid word, 
//you have to print it on a new line. 

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class zadachi {
	
	public static void capitalLetters(String first, Map<Character, Integer> map) {
		Pattern pattern = Pattern.compile("([#$%&*])(?<capital>[A-Z]+)\\1");
		Matcher matching = pattern.matcher(first);
		matching.find();
		String letters = matching.group("capital");
		for(Character capitals : letters.toCharArray()) {
			map.put(capitals, 0);
		}
	}
	
	public static void wordsLenght(String second, Map<Character, Integer> map) {
		Pattern pattern = Pattern.compile("(?<character>\\d{2}):(?<lenght>\\d{2})");
		Matcher matcher = pattern.matcher(second);
		while(matcher.find()) {
			char letter = (char) Integer.parseInt(matcher.group("character"));
			int lenght = Integer.parseInt(matcher.group("lenght"));
			if(map.containsKey(letter)) {
				map.put(letter, lenght + 1);
			}
		}
	}
	
	public static void printing(String thirth, Map<Character, Integer> map) {
		String[] words = thirth.split("\\s+");
		for(String word : words) {
			if(map.containsKey(word.charAt(0)) && map.get(word.charAt(0)) == word.length()) {
				System.out.println(word);
			}
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String[] input = scan.nextLine().split("\\|");
		Map<Character, Integer> characteristics = new HashMap<>();
		capitalLetters(input[0], characteristics);
		wordsLenght(input[1], characteristics);
		printing(input[2], characteristics);
	}
}
