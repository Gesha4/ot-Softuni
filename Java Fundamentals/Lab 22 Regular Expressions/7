//The war is in its peak, but you, young Padawan, can turn the tides with your programming skills. 
//You are tasked to create a program to decrypt the messages of The Order and prevent the death of 
//hundreds of lives. You will receive several messages, which are encrypted using the legendary star 
//enigma. You should decrypt the messages, following these rules: To properly decrypt a message, you 
//should count all the letters [s, t, a, r] – case insensitive and remove the count from the current 
//ASCII value of each symbol of the encrypted message.After decryption: Each message should have a 
//planet name, population, attack type ('A', as attack or 'D', as destruction) and soldier count.
//The planet name starts after '@' and contains only letters from the Latin alphabet. 
//The planet population starts after ':' and is an Integer. The attack type may be "A"(attack) or "D"
//(destruction) and must be surrounded by "!" (exclamation mark). The soldier count starts after "->" 
//and should be an Integer. The order in the message should be: planet name -> planet population -> 
//attack type -> soldier count. Each part can be separated from the others by any character except: '@',
//'-', '!', ':' and '>'. Input / Constraints
//•	The first line holds n – the number of messages– integer in range [1…100];
//•	On the next n lines, you will be receiving encrypted messages.
//Output
//After decrypting all messages, you should print the decrypted information in the following format:
//First print the attacked planets, then the destroyed planets.
//"Attacked planets: {attackedPlanetsCount}"
//"-> {planetName}"
//"Destroyed planets: {destroyedPlanetsCount}"
//"-> {planetName}"
//The planets should be ordered by name alphabetically.

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class zadachi {
	
	public static String decripting(String encripted) {
		Pattern regex = Pattern.compile("[STARstar]");
		Matcher matching = regex.matcher(encripted);
		int countLetters = 0;
		while(matching.find()) {
			countLetters++;
		}
		StringBuilder decripted = new StringBuilder();
		for(int i = 0; i < encripted.length(); i++) {
			char newChar = (char) (encripted.charAt(i) - countLetters);
			decripted.append(newChar);
		}
		return decripted.toString();
	}
	
	public static void print(List<String> planets) {
		for(String planet : planets) {
			System.out.println("-> " + planet);
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int messages = scan.nextInt();
		scan.nextLine();
		Pattern regex = Pattern.compile("@(?<name>[A-Z][a-z]+)[^@\\-!,:>]*:(?<population>\\d+)"
				+ "[^@\\-!,:>]*!(?<type>[AD])![^@\\-!,:>]*->(?<solders>\\d+)");
		List<String> attacked = new ArrayList<>();
		List<String> destroyed = new ArrayList<>();
		for (int i = 0; i < messages; i++) {
			String encripted = scan.nextLine();
			String decripted = decripting(encripted);
			Matcher info = regex.matcher(decripted);
			while(info.find()) {
				String name = info.group("name");
				String type = info.group("type");
				if(info.group("type").equals("A")) {
					attacked.add(info.group("name"));
				} else {
					destroyed.add(info.group("name"));
				}
			}
		}
		attacked.sort((f,s) -> f.compareTo(s));
		destroyed.sort((f,s) -> f.compareTo(s));
		System.out.println("Attacked planets: " + attacked.size());
		print(attacked);
		System.out.println("Destroyed planets: " + destroyed.size());
		print(destroyed);
	}
}
