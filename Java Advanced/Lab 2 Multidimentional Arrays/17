//The parking lot is a rectangular matrix where the first column is always free and all other cells are parking spots. A car can
//enter from any cell of the first column and then decides to go to a specific spot. If that spot is not free, the car searches
//for the closest free spot on the same row. If all the cells on that specific row are used, the car cannot park and leaves. If
//two free cells are located at the same distance from the initial parking spot, the cell which is closer to the entrance is 
//preferred. A car can pass through a used parking spot. Your task is to calculate the distance travelled by each car to its 
//parking spot. Example: A car enters the parking at row 1. It wants to go to cell 2, 2 so it moves through exactly four cells
//to reach its parking spot.
//Input
//On the first line of input, you are given the integers R and C, defining the dimensions of the parking lot
//On the next several lines, you are given the integers Z, X, Y where Z is the entry row and X, Y are the coordinates of the 
//desired parking spot
//The input stops with the command ‘stop’. All integers are separated by a single space
//Output
//For each car, print the distance travelled to the desired spot or the first free spot
//If a car cannot park on its desired row, print the message ‘Row {row number} full’

import java.util.Arrays;
import java.util.Scanner;

public class zadachi {
	
	public static int[] spot(int[][]parking, int[] command) {
		int[] spot = new int[2];
		int row = command[1];
		int col = command[2];
		spot[0] = row;
		if(parking[row][col] == 0) {
			spot[1] = col;
		} else {
			int distance = 1;
			while(distance < parking.length) {
				if(parking[row][col - distance] == 0) {
					spot[1] = col - distance;
					break;
				} else if(parking[row][col + distance] == 0) {
					spot[1] = col + distance;
					break;
				}
				distance++;
			}
		}
		return spot;
	}
		
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int[] parkCells = Arrays.stream(scan.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
		int rows = parkCells[0];
		int cols = parkCells[1];
		int[][] parking = new int[rows][cols];
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				parking[i][j] = 0;
			}
		}
		String input = scan.nextLine();
		while(!input.equalsIgnoreCase("stop")) {
			int[] command = Arrays.stream(input.split(" ")).mapToInt(Integer::parseInt).toArray();
			int road = 1;
			int[] spot = spot(parking, command);
			if(spot[1] == 0) {
				System.out.println("Row " + spot[0] + " full");
			} else {
				int row = command[0];
				while(row < spot[0]) {
					row++;
					road++;
				}
				int col = 0;
				while(col < spot[1]) {
					col++;
					road++;
				}
				parking[spot[0]][spot[1]] = 1;
				System.out.println(road);
			}
			input = scan.nextLine();
		}
	}		
}
