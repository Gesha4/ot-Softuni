//Write a program that reads (8 x 8) matrix of characters from the console. The matrix represents a chess
//board with figures on it. The figures can be - queens as char "q" or any other ASCII symbol. There will
//be more than one queen but only one queen will have valid position, which is not attacked from any other
//queen and does not attack any other queen. In other word in the way of the valid queen there are no other
//queens, but there may be any other ASCII symbol. Your task is to read the chessboard and find the position
//of the valid queen. According to chess rules the queen can attack all the cells in horizontal vertical and
//both diagonals which cross the queen position.

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

public class zadachi {
	
	public static void topRight(int oldI, int oldJ, Map<Integer, Integer> queens) {
		int i = oldI - 1;
		int j = oldJ + 1;
		while(i >= 0 && j < 8) {
			if(queens.containsKey(i) && queens.get(i) == j) {
				queens.remove(i);
				queens.remove(oldI);
			}
			i--;
			j++;
		}
	}
	
	public static void botRight(int oldI, int oldJ, Map<Integer, Integer> queens) {
		int i = oldI + 1;
		int j = oldJ + 1;
		while(i < 8 && j < 8) {
			if(queens.containsKey(i) && queens.get(i) == j) {
				queens.remove(i);
				queens.remove(oldI);
			}
			i++;
			j++;
		}
	}
	
	public static void topLeft(int oldI, int oldJ, Map<Integer, Integer> queens) {
		int i = oldI - 1;
		int j = oldJ - 1;
		while(i >= 0 && j >= 0) {
			if(queens.containsKey(i) && queens.get(i) == j) {
				queens.remove(i);
				queens.remove(oldI);
			}
			i--;
			j--;
		}
	}
	
	public static void botLeft(int oldI, int oldJ, Map<Integer, Integer> queens) {
		int i = oldI + 1;
		int j = oldJ - 1;
		while(i >= 0 && j >= 0) {
			if(queens.containsKey(i) && queens.get(i) == j) {
				queens.remove(i);
				queens.remove(oldI);
			}
			i++;
			j--;
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String[][] matrix = new String[8][8];
		for(int i = 0; i < 8; i++) {
			matrix[i] = scan.nextLine().split(" ");
		}
		Map<Integer,Integer> queens = new HashMap<>();
		for(int i = 0; i < 8; i++) {
			for(int j = 0; j < 8; j++) {
				if(matrix[i][j].equals("q")) {
					if(queens.containsKey(i)) {
						queens.remove(i);
					} else if (queens.containsValue(j)) {
						queens.values().remove(j);
					} else {
						queens.put(i, j); 
					}
				}
			}
		}
		for(Entry<Integer, Integer> queen : queens.entrySet()) {
			topRight(queen.getKey(), queen.getValue(), queens);
			botRight(queen.getKey(), queen.getValue(), queens);
			topLeft(queen.getKey(), queen.getValue(), queens);
			botLeft(queen.getKey(), queen.getValue(), queens);
		}
		for(Entry<Integer, Integer> queen : queens.entrySet()) {
			System.out.println(queen.getKey() + " " + queen.getValue());
		}
	}
}
