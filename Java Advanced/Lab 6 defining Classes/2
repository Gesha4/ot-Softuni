//Create class BankAccount. The class should have private fields for:
// Id: int (Starts from 1 and increments for every new account)
// Balance: double
// Interest rate: double (Shared for all accounts. Default value: 0.02)
//The class should also have public methods for:
// setInterestRate(double interest): void (static)
// getInterest(int Years): double
// deposit(double amount): void
//Create a test client supporting the following commands:
// Create
// Deposit {Id} {Amount}
// SetInterest {Interest}
// GetInterest {ID} {Years}
// End

//package
package zadachi;

public class BankAccount {
	private final static double DEFAULT_INTEREST_RATE = 0.02;
	private static int bankAccountCount = 1;
	private int id;
	private double balance;
	private double interestRate = DEFAULT_INTEREST_RATE;
	
	public BankAccount(){
		this.id = bankAccountCount++;
	}
	public int getId() {
		return this.id;
	}
	public void SetInterest(double interest) {
		this.interestRate = interest;
	}
	public double GetInterest(int years) {
		return this.interestRate * years * this.balance;
	}
	public void Deposit(double amount) {
		this.balance = amount;
	}
}


//test
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import zadachi.BankAccount;

public class zadachi {
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		String input = scan.nextLine();
		List<BankAccount> accounts = new ArrayList<>();
		while(!input.equals("End")) {
			if(input.equals("Create")) {
				BankAccount account = new BankAccount();
				System.out.println("Accaount ID" + account.getId() + " created");
				accounts.add(account);
			} else {
				String[] data = input.split(" ");
				if(data[0].equals("Deposit")) {
					boolean isSuchAcc = false;
					for(BankAccount account : accounts) {
						if(account.getId() == Integer.parseInt(data[1])) {
							isSuchAcc = true;
							double deposit = Double.parseDouble(data[2]); 
							account.Deposit(deposit);
							System.out.printf("Deposited %.2f to ID%d%n", deposit, account.getId());
						}
					}
					if(!isSuchAcc) {
						System.out.println("Account does not exist");
					}
				} else if(data[0].contains("Set")) {
					for(BankAccount account : accounts) {
						account.SetInterest(Double.parseDouble(data[1]));
					}
				} else {
					boolean isSuchAcc = false;
					for(BankAccount account : accounts) {
						if(account.getId() == Integer.parseInt(data[1])) {
							System.out.printf("%.2f%n", account.GetInterest(Integer.parseInt(data[2])));
						}
					}
					if(!isSuchAcc) {
						System.out.println("Account does not exist");
					}
				}
			}
			input = scan.nextLine();
		}
	}
}
