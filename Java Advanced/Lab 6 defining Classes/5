//Your task is to implement a program that keeps track of cars and their fuel and supports methods for moving the cars. Define a 
//class Car that keeps track of a car information Model, fuel amount, fuel cost for 1 kilometer and distance traveled. A Car Model
//is unique - there will never be 2 cars with the same model. On the first line of the input you will receive a number N - the 
//number of cars you need to track, on each of the next N lines you will receive information for a car in the following format 
//"<Model> <FuelAmount> <FuelCostFor1km>", all cars start at 0 kilometers traveled. After the N lines until the command "End" is
//received, you will receive commands in the following format "Drive <CarModel>  <amountOfKm>", implement a method in the Car 
//class to calculate whether a car can move that distance or not. If it can the car fuel amount should be reduced by the amount
//of used fuel and its distance traveled should be increased by the amount of kilometers traveled, otherwise the car should not 
//move (Its fuel amount and distance traveled should stay the same) and you should print on the console "Insufficient fuel for 
//the drive". After the "End" command is received, print each car in order of appearing in input and its current fuel amount and 
//distance traveled in the format "<Model> <fuelAmount>  <distanceTraveled>", where the fuel amount should be printed to two 
//decimal places after the separator.

//package
package zadachi;

public class Car {
	private String model;
	private double fuelAmound;
	private double fuelCost;
	private int distance = 0;
	public String getModel() {
		return this.model;
	}
	public Car(String model, Double fuelAmount, Double fuelCost) {
		this.model = model;
		this.fuelAmound = fuelAmount;
		this.fuelCost = fuelCost;
	}
	public Car(String[] data) {
		this.model = data[0];
		this.fuelAmound = Double.parseDouble(data[1]);
		this.fuelCost = Double.parseDouble(data[2]);
	}
	public void drive(int km) {
		double fuelNeeded = km * fuelCost;
		if((fuelNeeded) < fuelAmound) {
			fuelAmound -= fuelNeeded;
			distance += km;
		} else {
			System.out.println("Insufficient fuel for the drive");
		}
	}
	public void info() {
		System.out.printf("%s %.2f %d%n", this.model, this.fuelAmound, this.distance);
	}
}


//test
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import zadachi.Car;

public class zadachi {
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int count = Integer.parseInt(scan.nextLine());
		List<Car> cars = new ArrayList<>(count);
		for(int i = 0; i < count; i++) {
			cars.add(new Car(scan.nextLine().split(" ")));
		}
		String input = scan.nextLine();
		while(!input.equals("End")) {
			String[] data = input.split(" ");
			String model = data[1];
			int km = Integer.parseInt(data[2]);
			for(Car car : cars) {
				if(car.getModel().equals(model)) {
					car.drive(km);
				}
			}
			input = scan.nextLine();
		}
		for(Car car : cars) {
			car.info();
		}
	}
}
