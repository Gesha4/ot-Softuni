//GUnit is a unit testing framework – it provides the user with the opportunity to create unit tests which are very important to 
//big project programming. It is still in beta though and you are given the job to format a database with all the classes, for 
//each class - its methods, and of each of its methods – its unit tests. You will be given several input lines which will contain
//info about a class’s method’s unit test. All valid lines will be in the following format:
//{class name} | {method name} | {unit test name}
//The elements are separated by a space, a ‘|’ (vertical line) and another space. The valid class names, method names and unit 
//test names can only contain English alphabet letters and digits, and must always start with a capital letter. All parameters 
//must be at least 2 symbols long. Any input line that does not follow the, specified above, format, should be ignored. Your task 
//is to save every unit test to its corresponding method and every method to its corresponding class in the database. If a class 
//with the given name already exists you should add the new method with its test to it. If the method also exists in the given 
//existing class, you should just add the new unit test to the corresponding method. If even the test is not new, you should do 
//nothing. There is also a specific way in which the classes, methods, and unit tests should be sorted. The classes should be 
//ordered first by the amount of unit tests it has – descending, then by the amount of methods it has – ascending, and then 
//alphabetically. The methods should be ordered by the amount of unit tests they have - descending, and then alphabetically. 
//The unit tests should be ordered by the length of their names – ascending and then by alphabetically. 
//Input
//•	The input will come in the form of input lines.
//•	When you receive the command “It’s testing time!” the input should stop and the output should start. 
//Output
//•	The output is simple. You must print all classes in the following format:
//•	“{class name}:
//•	“##{method1 name}:
//•	“####{test1 name}
//•	“####{test2 name}
//•	“##{method2 name}:
//•	“{class2 name}:
//•	…”
//•	For more info see the example below. 
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class zadachi {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		Map<String, Map<String, Set<String>>> classes = new LinkedHashMap<>();
		String validElementRegex = "[A-Z][A-Za-z0-9]+";
		String validDelimiterRegex ="\\s\\|\\s";
		String validLineRegex = String.format("%1$s%2$s%1$s%2$s%1$s",
				validElementRegex, validDelimiterRegex);
		String line = scan.nextLine();
		while(!line.equals("It's testing time!")) {
			if(!line.matches(validLineRegex)) {
				continue;
			}
			String[] tokens = line.split(validDelimiterRegex);
			String clazz = tokens[0];
			String method = tokens[1];
			String unitTest = tokens[2];
			Set<String> unitTests = new LinkedHashSet<>();
			Map<String, Set<String>> methods = new LinkedHashMap<>();
			if(classes.containsKey(clazz)) {
				methods = classes.get(clazz);
			}
			if(methods.containsKey(method)) {
				unitTests = methods.get(method);
			}
			unitTests.add(unitTest);
			methods.put(method, unitTests);
			classes.put(clazz, methods);
			line = scan.nextLine();
		}
		StringBuilder result = new StringBuilder();
		classes.entrySet().stream().sorted((c1, c2) -> {
			int amountUnitTestClass1 = c1.getValue().values().stream(
					).mapToInt(m -> m.size()).sum();
			int amountUnitTestClass2 = c2.getValue().values().stream(
					).mapToInt(m -> m.size()).sum();
			int comparatorByAmountOfUnitTest = amountUnitTestClass2 - amountUnitTestClass1;
			if(comparatorByAmountOfUnitTest != 0) {
				return comparatorByAmountOfUnitTest;
			}
			int amountMethodsClass1 = c1.getValue().size();
			int amountMethodsClass2 = c2.getValue().size();
			int comparatorByAmountOfMethods = amountMethodsClass1 - amountMethodsClass2;
			if(comparatorByAmountOfMethods != 0) {
				return comparatorByAmountOfMethods;
			}
			return  c1.getKey().compareTo(c2.getKey());
		}).forEach(clazz ->{
			result.append(String.format("%s:", clazz.getKey())).append(System.lineSeparator());
			clazz.getValue().entrySet().stream().sorted((m1, m2) -> {
				int amountOfUnitTestsMethod1 = m1.getValue().size();
				int amountOfUnitTestsMethod2 = m2.getValue().size();
				int comparatorByAmountTests = amountOfUnitTestsMethod2 - amountOfUnitTestsMethod1;
				if(comparatorByAmountTests != 0) {
					return comparatorByAmountTests;
				}
				return m1.getKey().compareTo(m2.getKey());
			}).forEach(method -> {
				result.append(String.format("##%s", method.getKey())).append(System.lineSeparator());
				method.getValue().stream().sorted((u1, u2) ->{
					int comparatorByNameLength = u1.length() - u2.length();
					if(comparatorByNameLength != 0) {
						return comparatorByNameLength;
					}
					int comparatorByName = u1.compareTo(u2);
					return comparatorByName;
				}).forEach(unitTest ->{
					result.append(String.format("####%s",unitTest)).append(System.lineSeparator());
				});
			});
		});
		System.out.println(result);
	}
}
