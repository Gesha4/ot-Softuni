//On each input line you’ll be given data in format: "singer @venue ticketsPrice ticketsCount". There will be no redundant white
//spaces anywhere in the input. Aggregate the data by venue and by singer. For each venue, print the singer and the total amount
//of money his/her concerts have made on a separate line. Venues should be kept in the same order they were entered, the singers
//should be sorted by how much money they have made in descending order. If two singers have made the same amount of money, keep
//them in the order in which they were entered. Keep in mind that if a line is in incorrect format, it should be skipped and its
//data should not be added to the output. Each of the four tokens must be separated by a space, everything else is invalid. The 
//venue should be denoted with @ in front of it, such as @Sunny Beach SKIP THOSE: Ceca@Belgrade125 12378, Ceca @Belgrade12312 123
//The singer and town name may consist of one to three words.
//Input
// The input data should be read from the console.
// It consists of a variable number of lines and ends when the command “End&quot; is received.
// The input data will always be valid and in the format described. There is no need to check it explicitly.
//Output
// The output should be printed on the console.
// Print the aggregated data for each venue and singer in the format shown below.
// Format for singer lines is #{2*space}{singer}{space}-&gt;{space}{total money}

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class zadachi {
	
	public static void adding(Map<String, Map<String, Integer>> places, String name, String place, int money) {
		if(!places.containsKey(place)) {
			places.put(place, new LinkedHashMap<>());
			places.get(place).put(name, money);
		} else {
			if(!places.get(place).containsKey(name)) {
				places.get(place).put(name, money);
			} else {
				places.get(place).put(name, places.get(place).get(name) + money);
			}
		}
	}
	
	public static void print(Map<String, Map<String, Integer>> places) {
		for(Entry<String, Map<String, Integer>> place : places.entrySet()) {
			System.out.println(place.getKey());
			place.getValue().entrySet().stream().sorted((f,s) -> s.getValue().compareTo(f.getValue()))
				.forEach(entry -> {
					System.out.println("#  " + entry.getKey() + " -> " + entry.getValue());
				});
		}
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		Map<String, Map<String, Integer>> places = new LinkedHashMap<>();
		Pattern pattern = Pattern.compile("(?<name>([A-Z][a-z]+\\s){1,3})@(?<place>([A-Z][a-z]+\\s){1,3})(?<price>[0-9]+)\\s(?<tickets>[0-9]+)");
		String input = scan.nextLine();
		while(!input.equals("End")) {
			Matcher matcher = pattern.matcher(input);
			if(matcher.find()) {
				String singer = matcher.group("name").substring(0, matcher.group("name").length() - 1);
				String place = matcher.group("place").substring(0, matcher.group("place").length() - 1);
				int money = Integer.parseInt(matcher.group("price")) * Integer.parseInt(matcher.group("tickets"));
				adding(places, singer, place, money);
			}
			input = scan.nextLine();
		}
		print(places);
	}
}
