//You are given a sequence of people and for every person what cards he draws from the deck. 
//The input will be separate lines in the format: {personName}: {PT, PT, PT,â€¦ PT} Where P 
//(2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A) is the power of the card and T (S, H, D, C) is the
//type. The input ends when a "JOKER" is drawn. The name can contain any ASCII symbol except ':'.
//The input will always be valid and in the format described, there is no need to check it.
//A single person cannot have more than one card with the same power and type, if he draws 
//such a card he discards it. The people are playing with multiple decks. Each card has a 
//value that is calculated by the power multiplied by the type. Powers 2 to 10 have the same 
//value and J to A are 11 to 14. Types are mapped to multipliers the following way (S -> 4,
//H-> 3, D -> 2, C -> 1). Finally print out the total value each player has in his hand in 
//the format: {personName}: {value}

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;

public class zadachi {
	
	public static void adding(Map<String, Set<String>> players, String input) {
		String[] data = input.split(": ");
		String name = data[0];
		Set<String> cards = new HashSet();
		cards = Arrays.stream(data[1].split(", ")).collect(Collectors.toSet());
		if(!players.containsKey(name)) {
			players.put(name, cards);
		} else {
			players.get(name).addAll(cards);
		}
	}
	
	public static int powerOfCards(Set<String> cards) {
		int allPower = 0;
		for(String card : cards) {
			int power = 0;
			int type = 0;
			if(card.length() == 3) {
				power = 10;
			}else if(card.charAt(0) > 47 && card.charAt(0) < 58) {
				power = Character.getNumericValue(card.charAt(0));
			} else {
				switch(card.charAt(0)) {
				case 'J' : power = 11;break;
				case 'Q' : power = 12;break;
				case 'K' : power = 13;break;
				case 'A' : power = 14;break;
				}
			}
			switch(card.charAt(card.length() - 1)) {
			case 'S' : type = 4;break;
			case 'H' : type = 3;break;
			case 'D' : type = 2;break;
			case 'C' : type = 1;break;
			}
			allPower += (power * type);
		}
		return allPower;
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		Map<String, Set<String>> players = new LinkedHashMap<>();
		String input = scan.nextLine();
		while(!input.equals("JOKER")) {
			adding(players, input);
			input = scan.nextLine();
		}
		for(Entry<String, Set<String>> player : players.entrySet()) {
			System.out.println(player.getKey() + ": " + powerOfCards(player.getValue()));
		}
	}		
}
