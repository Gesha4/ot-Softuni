//Mathematical expressions are written in an infix notations, for example "5 / ( 3 + 2 )". However, this kind of notation is not
//efficient for computer processing, as you first need to evaluate the expression inside the brackets, so there is a lot of back 
//Ð°nd forth movement. A more suitable approach is to convert it in the so-called postfix notations (also called Reverse Polish 
//Notation), in which the expression is evaluated from left to right, for example "3 2 + 5 /". Implement an algorithm that 
//converts the mathematical expression from infix notation into a postfix notation. Use the famous Shunting-yard algorithm.
//Input :
//You will receive an expression on a single line, consisting of tokens
//Tokens could be numbers 0-9, variables a-z, operators +, -, *, / and brackets ( or )
//Each token is separated by exactly one space
//Output: The output should be on a single line, consisting of tokens, separated by exactly one space.

import java.util.ArrayDeque;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class zadachi {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		ArrayDeque<String> stack = new ArrayDeque<>();
		StringBuilder output = new StringBuilder();
		Pattern pattern = Pattern.compile("[A-Za-z0-9]");
		String[] input = scan.nextLine().split(" ");
		for(int i = 0; i < input.length; i++) {
			Matcher matching = pattern.matcher(input[i]);
			if(matching.find()) {
				output.append(input[i] + " ");
			} else if(input[i].equals(")")) {
				while(!stack.peek().equals("(")) {
					output.append(stack.pop() + " ");
				}
				stack.pop();
			} else if(!stack.isEmpty() && (input[i].equals(stack.peek()) 
					|| (input[i].equals("*") && stack.peek().equals("/")) 
					|| (input[i].equals("/") && stack.peek().equals("*")))) {
				output.append(stack.pop() + " ");
				stack.push(input[i]);
			} else {
				stack.push(input[i]);
			}
		}
		if(!stack.isEmpty()) {
			while(!stack.isEmpty()) {
				output.append(stack.pop() + " ");
			}
		}
		System.out.println(output);
	}
}
