//Each member of the Fibonacci sequence is calculated from the sum of the two previous members. The first
//two elements are 1, 1. Therefore the sequence goes as 1, 1, 2, 3, 5, 8, 13, 21, 34… The following 
//sequence can be generated with an array, but that’s easy, so your task is to implement it recursively.
//If the function getFibonacci(n) returns the nth Fibonacci number, we can express it using 
//getFibonacci(n) = getFibonacci(n-1) + getFibonacci(n-2). However, this will never end and in a few 
//seconds a Stack Overflow Exception is thrown. In order for the recursion to stop it has to have a
//"bottom". The bottom of the recursion is getFibonacci(1), and should return 1. The same goes for 
//getFibonacci(0).
//Input
//•	On the only line in the input the user should enter the wanted Fibonacci number N where 1 ≤ N ≤ 49
//Output
//•	The output should be the nth Fibonacci number counting from 0 


import java.util.ArrayDeque;
import java.util.Scanner;

public class zadachi {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		ArrayDeque<Integer> queue = new ArrayDeque<>();
		int num = Integer.parseInt(scan.nextLine());
		if(num == 0 || num == 1) {
			System.out.println(1);
		} else {
			queue.offer(1);
			queue.offer(1);
			for(int i = 2; i <= num; i++) {
				int first = queue.poll();
				int second = queue.poll();
				second += first;
				queue.offer(second);
				queue.offer(first);
			}
			System.out.println(queue.peek());
		}
	}
}
