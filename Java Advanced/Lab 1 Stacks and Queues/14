//Given a sequence consisting of parentheses, determine whether the expression is balanced. A sequence 
//of parentheses is balanced if every open parenthesis can be paired uniquely with a closed parenthesis
//that occurs after the former. Also, the interval between them must be balanced. You will be given three
//types of parentheses: (, {, and [.
//{[()]} - This is a balanced parenthesis.
//{[(])} - This is not a balanced parenthesis.
//Input
//•	Each input consists of a single line, the sequence of parentheses.
//•	1 ≤ Length of sequence ≤ 1000
//•	Each character of the sequence will be one of the following: {, }, (, ), [, ].
//Output
//•	For each test case, print on a new line "YES" if the parentheses are balanced. Otherwise, print "NO".


import java.util.ArrayDeque;
import java.util.Scanner;

public class zadachi {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		ArrayDeque<Character> stack = new ArrayDeque<>();
		ArrayDeque<Character> queue = new ArrayDeque<>();
		String line = scan.nextLine();
		boolean balanced = true;
		if(line.length() % 2 == 0) {
			for(int i = 0; i < line.length(); i++) {
				if(line.charAt(i) == '(' || line.charAt(i) == '[' || line.charAt(i) == '{') {
					stack.push(line.charAt(i));
				} else {
					queue.offer(line.charAt(i));
				}
			}
		} else {
			balanced = false;
		}
		if(balanced) {
			while(!stack.isEmpty()) {
				char left = stack.pop();
				char right = queue.poll();
				if((left == '(' && right == ')')
					|| (left == '{' && right == '}')
					|| (left == '[' && right == ']')) {
					
				} else {
					balanced = false;
				}
			}
		}
		if(balanced) {
			System.out.println("YES");
		} else {
			System.out.println("NO");
		}
	}
}
