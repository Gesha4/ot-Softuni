//You are given an empty text. Your task is to implement 4 types of commands related to manipulating the text:
//•	"1 [string]" - appends [string] to the end of the text
//•	"2 [count]" - erases the last [count] elements from the text
//•	"3 [index]" - returns the element at position [index] from the text
//•	"4" - undoes the last not-undone command of type 1 or 2 and returns the text to the state before that operation
//Input
//•	The first line contains N, the number of operations, where 1 ≤ N ≤ 105
//•	Each of the following N lines contains the name of the operation, followed by the command argument, if any, 
//separated by space in the following format "command argument". 
//•	The length of the text will not exceed 1000000
//•	All input characters are English letters
//•	It is guaranteed that the sequence of input operation is possible to perform
//Output
//•	For each operation of type "3" print a single line with the returned character of that operation.

import java.util.ArrayDeque;
import java.util.Scanner;

public class zadachi {
	
	public static void edit(StringBuilder str, String[] command) {
		switch(command[0]) {
		case "1" : str.append(command[1]);break;
		case "2" : str.delete(str.length() - Integer.parseInt(command[1]), str.length());break;
		}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		ArrayDeque<String> stack = new ArrayDeque<>();
		StringBuilder str = new StringBuilder();
		int n = Integer.parseInt(scan.nextLine());
		for(int i = 0; i < n; i++) {
			String[] command = scan.nextLine().split(" ");
			if(command[0].equals("1")) {
				stack.push("2 " + command[1].length());
				edit(str, command);
			} else if(command[0].equals("2")) {
				stack.push("1 " + str.substring(str.length() - Integer.parseInt(command[1])));
				edit(str, command);
			} else if(command[0].equals("3")) {
				System.out.println(str.charAt(Integer.parseInt(command[1]) - 1));
			} else if(command[0].equals("4") && !stack.isEmpty()) {
				edit(str, stack.pop().split(" "));
			}
		}
	}
}
