//Write a program, which gathers a sum of money, using the least possible number of coins. This is the range of possible coin 
//values: { 1, 2, 5, 10, 20, 50 }. You will receive a desired sum. The goal is to reach the sum using as few coins as possible 
//using a greedy approach. Weâ€™ll assume that each coin value and the desired sum are integers.
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;

public class zadachi {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
        String[] elements = scan.nextLine().substring(7).split(", ");
        int[] coins = new int[elements.length];
        for (int i = 0; i < coins.length; i++) {
            coins[i] = Integer.parseInt(elements[i]);
        }
        int targetSum = Integer.parseInt(scan.nextLine().substring(5));
        Map<Integer, Integer> usedCoins = chooseCoins(coins, targetSum);
        int allCoins = 0;
        for (Map.Entry<Integer, Integer> usedCoin : usedCoins.entrySet()) {
            allCoins += usedCoin.getValue();
        }
        System.out.println("Number of coins to take: " + allCoins);
        for (Map.Entry<Integer, Integer> usedCoin : usedCoins.entrySet()) {
            System.out.println(usedCoin.getValue() + " coin(s) with value " + usedCoin.getKey());
        }
    }

    public static Map<Integer, Integer> chooseCoins(int[] coins, int targetSum) {
        List<Integer> sortedCoins = Arrays.stream(coins)
                .boxed()
                .sorted(Collections.reverseOrder())
                .collect(Collectors.toList());
        Map<Integer, Integer> chosenCoins = new LinkedHashMap<>();
        int currentSum = 0;
        int coinIndex = 0;
        while (currentSum != targetSum && coinIndex < sortedCoins.size()) {
            int currentCoin = sortedCoins.get(coinIndex);
            int remainder = targetSum - currentSum;
            int numberOfCoins = remainder / currentCoin;
            if (currentSum + currentCoin <= targetSum) {
                chosenCoins.put(currentCoin, numberOfCoins);
                currentSum += numberOfCoins * currentCoin;
            }
            coinIndex++;
        }
        if (currentSum != targetSum) {
            throw new IllegalArgumentException();
        }
        return chosenCoins;
    }
}
